# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Booking {
  id: ID!
  name: String
  isConfirmed: Boolean
  durationMins: Int
  startsAt: DateTime
  notes: String
  patient(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  patientCount(where: PatientWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  name: StringFilter
  isConfirmed: BooleanFilter
  durationMins: IntFilter
  startsAt: DateTimeNullableFilter
  notes: StringFilter
  patient: PatientManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PatientManyRelationFilter {
  every: PatientWhereInput
  some: PatientWhereInput
  none: PatientWhereInput
}

input BookingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isConfirmed: OrderDirection
  durationMins: OrderDirection
  startsAt: OrderDirection
  notes: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input BookingUpdateInput {
  name: String
  isConfirmed: Boolean
  durationMins: Int
  startsAt: DateTime
  notes: String
  patient: PatientRelateToManyForUpdateInput
}

input PatientRelateToManyForUpdateInput {
  disconnect: [PatientWhereUniqueInput!]
  set: [PatientWhereUniqueInput!]
  create: [PatientCreateInput!]
  connect: [PatientWhereUniqueInput!]
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  name: String
  isConfirmed: Boolean
  durationMins: Int
  startsAt: DateTime
  notes: String
  patient: PatientRelateToManyForCreateInput
}

input PatientRelateToManyForCreateInput {
  create: [PatientCreateInput!]
  connect: [PatientWhereUniqueInput!]
}

type Calendar {
  id: ID!
  name: String
}

input CalendarWhereUniqueInput {
  id: ID
}

input CalendarWhereInput {
  AND: [CalendarWhereInput!]
  OR: [CalendarWhereInput!]
  NOT: [CalendarWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CalendarOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CalendarUpdateInput {
  name: String
}

input CalendarUpdateArgs {
  where: CalendarWhereUniqueInput!
  data: CalendarUpdateInput!
}

input CalendarCreateInput {
  name: String
}

type Doctor {
  id: ID!
  user: User
  isCompleteProfile: Boolean
  isVerified: Boolean
  languages(
    where: DoctorLanguageWhereInput! = {}
    orderBy: [DoctorLanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DoctorLanguage!]
  languagesCount(where: DoctorLanguageWhereInput! = {}): Int
  summary: String
  email: String
  patients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  patientsCount(where: PatientWhereInput! = {}): Int
  savedByPatients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  savedByPatientsCount(where: PatientWhereInput! = {}): Int
}

input DoctorWhereUniqueInput {
  id: ID
  email: String
}

input DoctorWhereInput {
  AND: [DoctorWhereInput!]
  OR: [DoctorWhereInput!]
  NOT: [DoctorWhereInput!]
  id: IDFilter
  user: UserWhereInput
  isCompleteProfile: BooleanFilter
  isVerified: BooleanFilter
  languages: DoctorLanguageManyRelationFilter
  summary: StringFilter
  email: StringFilter
  patients: PatientManyRelationFilter
  savedByPatients: PatientManyRelationFilter
}

input DoctorLanguageManyRelationFilter {
  every: DoctorLanguageWhereInput
  some: DoctorLanguageWhereInput
  none: DoctorLanguageWhereInput
}

input DoctorOrderByInput {
  id: OrderDirection
  isCompleteProfile: OrderDirection
  isVerified: OrderDirection
  summary: OrderDirection
  email: OrderDirection
}

input DoctorUpdateInput {
  user: UserRelateToOneForUpdateInput
  isCompleteProfile: Boolean
  isVerified: Boolean
  languages: DoctorLanguageRelateToManyForUpdateInput
  summary: String
  email: String
  patients: PatientRelateToManyForUpdateInput
  savedByPatients: PatientRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input DoctorLanguageRelateToManyForUpdateInput {
  disconnect: [DoctorLanguageWhereUniqueInput!]
  set: [DoctorLanguageWhereUniqueInput!]
  create: [DoctorLanguageCreateInput!]
  connect: [DoctorLanguageWhereUniqueInput!]
}

input DoctorUpdateArgs {
  where: DoctorWhereUniqueInput!
  data: DoctorUpdateInput!
}

input DoctorCreateInput {
  user: UserRelateToOneForCreateInput
  isCompleteProfile: Boolean
  isVerified: Boolean
  languages: DoctorLanguageRelateToManyForCreateInput
  summary: String
  email: String
  patients: PatientRelateToManyForCreateInput
  savedByPatients: PatientRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input DoctorLanguageRelateToManyForCreateInput {
  create: [DoctorLanguageCreateInput!]
  connect: [DoctorLanguageWhereUniqueInput!]
}

type DoctorLanguage {
  id: ID!
  label: String
  value: String
  doctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  doctorsCount(where: DoctorWhereInput! = {}): Int
}

input DoctorLanguageWhereUniqueInput {
  id: ID
}

input DoctorLanguageWhereInput {
  AND: [DoctorLanguageWhereInput!]
  OR: [DoctorLanguageWhereInput!]
  NOT: [DoctorLanguageWhereInput!]
  id: IDFilter
  label: StringFilter
  value: StringFilter
  doctors: DoctorManyRelationFilter
}

input DoctorManyRelationFilter {
  every: DoctorWhereInput
  some: DoctorWhereInput
  none: DoctorWhereInput
}

input DoctorLanguageOrderByInput {
  id: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input DoctorLanguageUpdateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForUpdateInput
}

input DoctorRelateToManyForUpdateInput {
  disconnect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
  create: [DoctorCreateInput!]
  connect: [DoctorWhereUniqueInput!]
}

input DoctorLanguageUpdateArgs {
  where: DoctorLanguageWhereUniqueInput!
  data: DoctorLanguageUpdateInput!
}

input DoctorLanguageCreateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForCreateInput
}

input DoctorRelateToManyForCreateInput {
  create: [DoctorCreateInput!]
  connect: [DoctorWhereUniqueInput!]
}

type User {
  id: ID!
  firstName: String
  lastName: String
  doctor: Doctor
  email: String
  password: PasswordState
  prompts(
    where: PromptWhereInput! = {}
    orderBy: [PromptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prompt!]
  promptsCount(where: PromptWhereInput! = {}): Int
  patient: Patient
  stepperProgs(
    where: StepperProgWhereInput! = {}
    orderBy: [StepperProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperProg!]
  stepperProgsCount(where: StepperProgWhereInput! = {}): Int
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  doctor: DoctorWhereInput
  email: StringFilter
  prompts: PromptManyRelationFilter
  patient: PatientWhereInput
  stepperProgs: StepperProgManyRelationFilter
  stepperStepProgs: StepperStepProgManyRelationFilter
}

input PromptManyRelationFilter {
  every: PromptWhereInput
  some: PromptWhereInput
  none: PromptWhereInput
}

input StepperProgManyRelationFilter {
  every: StepperProgWhereInput
  some: StepperProgWhereInput
  none: StepperProgWhereInput
}

input StepperStepProgManyRelationFilter {
  every: StepperStepProgWhereInput
  some: StepperStepProgWhereInput
  none: StepperStepProgWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  firstName: String
  lastName: String
  doctor: DoctorRelateToOneForUpdateInput
  email: String
  password: String
  prompts: PromptRelateToManyForUpdateInput
  patient: PatientRelateToOneForUpdateInput
  stepperProgs: StepperProgRelateToManyForUpdateInput
  stepperStepProgs: StepperStepProgRelateToManyForUpdateInput
}

input DoctorRelateToOneForUpdateInput {
  create: DoctorCreateInput
  connect: DoctorWhereUniqueInput
  disconnect: Boolean
}

input PromptRelateToManyForUpdateInput {
  disconnect: [PromptWhereUniqueInput!]
  set: [PromptWhereUniqueInput!]
  create: [PromptCreateInput!]
  connect: [PromptWhereUniqueInput!]
}

input PatientRelateToOneForUpdateInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
  disconnect: Boolean
}

input StepperProgRelateToManyForUpdateInput {
  disconnect: [StepperProgWhereUniqueInput!]
  set: [StepperProgWhereUniqueInput!]
  create: [StepperProgCreateInput!]
  connect: [StepperProgWhereUniqueInput!]
}

input StepperStepProgRelateToManyForUpdateInput {
  disconnect: [StepperStepProgWhereUniqueInput!]
  set: [StepperStepProgWhereUniqueInput!]
  create: [StepperStepProgCreateInput!]
  connect: [StepperStepProgWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  doctor: DoctorRelateToOneForCreateInput
  email: String
  password: String
  prompts: PromptRelateToManyForCreateInput
  patient: PatientRelateToOneForCreateInput
  stepperProgs: StepperProgRelateToManyForCreateInput
  stepperStepProgs: StepperStepProgRelateToManyForCreateInput
}

input DoctorRelateToOneForCreateInput {
  create: DoctorCreateInput
  connect: DoctorWhereUniqueInput
}

input PromptRelateToManyForCreateInput {
  create: [PromptCreateInput!]
  connect: [PromptWhereUniqueInput!]
}

input PatientRelateToOneForCreateInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
}

input StepperProgRelateToManyForCreateInput {
  create: [StepperProgCreateInput!]
  connect: [StepperProgWhereUniqueInput!]
}

input StepperStepProgRelateToManyForCreateInput {
  create: [StepperStepProgCreateInput!]
  connect: [StepperStepProgWhereUniqueInput!]
}

type Patient {
  id: ID!
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  name: String
  isCompleteProfile: Boolean
  user: User
  visitedDoctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  visitedDoctorsCount(where: DoctorWhereInput! = {}): Int
  savedDoctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  savedDoctorsCount(where: DoctorWhereInput! = {}): Int
}

input PatientWhereUniqueInput {
  id: ID
}

input PatientWhereInput {
  AND: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  NOT: [PatientWhereInput!]
  id: IDFilter
  bookings: BookingManyRelationFilter
  name: StringFilter
  isCompleteProfile: BooleanFilter
  user: UserWhereInput
  visitedDoctors: DoctorManyRelationFilter
  savedDoctors: DoctorManyRelationFilter
}

input BookingManyRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input PatientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isCompleteProfile: OrderDirection
}

input PatientUpdateInput {
  bookings: BookingRelateToManyForUpdateInput
  name: String
  isCompleteProfile: Boolean
  user: UserRelateToOneForUpdateInput
  visitedDoctors: DoctorRelateToManyForUpdateInput
  savedDoctors: DoctorRelateToManyForUpdateInput
}

input BookingRelateToManyForUpdateInput {
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input PatientUpdateArgs {
  where: PatientWhereUniqueInput!
  data: PatientUpdateInput!
}

input PatientCreateInput {
  bookings: BookingRelateToManyForCreateInput
  name: String
  isCompleteProfile: Boolean
  user: UserRelateToOneForCreateInput
  visitedDoctors: DoctorRelateToManyForCreateInput
  savedDoctors: DoctorRelateToManyForCreateInput
}

input BookingRelateToManyForCreateInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

type Prompt {
  id: ID!
  stepper: Stepper
  user: User
  name: String
  promptType: String
  promptValue: String
  slug: String
}

input PromptWhereUniqueInput {
  id: ID
}

input PromptWhereInput {
  AND: [PromptWhereInput!]
  OR: [PromptWhereInput!]
  NOT: [PromptWhereInput!]
  id: IDFilter
  stepper: StepperWhereInput
  user: UserWhereInput
  name: StringFilter
  promptType: StringFilter
  promptValue: StringFilter
  slug: StringFilter
}

input PromptOrderByInput {
  id: OrderDirection
  name: OrderDirection
  promptType: OrderDirection
  promptValue: OrderDirection
  slug: OrderDirection
}

input PromptUpdateInput {
  stepper: StepperRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  name: String
  promptType: String
  promptValue: String
  slug: String
}

input StepperRelateToOneForUpdateInput {
  create: StepperCreateInput
  connect: StepperWhereUniqueInput
  disconnect: Boolean
}

input PromptUpdateArgs {
  where: PromptWhereUniqueInput!
  data: PromptUpdateInput!
}

input PromptCreateInput {
  stepper: StepperRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  name: String
  promptType: String
  promptValue: String
  slug: String
}

input StepperRelateToOneForCreateInput {
  create: StepperCreateInput
  connect: StepperWhereUniqueInput
}

type Stepper {
  id: ID!
  title: String
  name: String
  slug: String
  description: String
  eyebrow: String
  prompt: Prompt
  stepperSteps(
    where: StepperStepWhereInput! = {}
    orderBy: [StepperStepOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStep!]
  stepperStepsCount(where: StepperStepWhereInput! = {}): Int
  stepperProgs(
    where: StepperProgWhereInput! = {}
    orderBy: [StepperProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperProg!]
  stepperProgsCount(where: StepperProgWhereInput! = {}): Int
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
}

input StepperWhereUniqueInput {
  id: ID
}

input StepperWhereInput {
  AND: [StepperWhereInput!]
  OR: [StepperWhereInput!]
  NOT: [StepperWhereInput!]
  id: IDFilter
  title: StringFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  eyebrow: StringFilter
  prompt: PromptWhereInput
  stepperSteps: StepperStepManyRelationFilter
  stepperProgs: StepperProgManyRelationFilter
  stepperStepProgs: StepperStepProgManyRelationFilter
}

input StepperStepManyRelationFilter {
  every: StepperStepWhereInput
  some: StepperStepWhereInput
  none: StepperStepWhereInput
}

input StepperOrderByInput {
  id: OrderDirection
  title: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  eyebrow: OrderDirection
}

input StepperUpdateInput {
  title: String
  name: String
  slug: String
  description: String
  eyebrow: String
  prompt: PromptRelateToOneForUpdateInput
  stepperSteps: StepperStepRelateToManyForUpdateInput
  stepperProgs: StepperProgRelateToManyForUpdateInput
  stepperStepProgs: StepperStepProgRelateToManyForUpdateInput
}

input PromptRelateToOneForUpdateInput {
  create: PromptCreateInput
  connect: PromptWhereUniqueInput
  disconnect: Boolean
}

input StepperStepRelateToManyForUpdateInput {
  disconnect: [StepperStepWhereUniqueInput!]
  set: [StepperStepWhereUniqueInput!]
  create: [StepperStepCreateInput!]
  connect: [StepperStepWhereUniqueInput!]
}

input StepperUpdateArgs {
  where: StepperWhereUniqueInput!
  data: StepperUpdateInput!
}

input StepperCreateInput {
  title: String
  name: String
  slug: String
  description: String
  eyebrow: String
  prompt: PromptRelateToOneForCreateInput
  stepperSteps: StepperStepRelateToManyForCreateInput
  stepperProgs: StepperProgRelateToManyForCreateInput
  stepperStepProgs: StepperStepProgRelateToManyForCreateInput
}

input PromptRelateToOneForCreateInput {
  create: PromptCreateInput
  connect: PromptWhereUniqueInput
}

input StepperStepRelateToManyForCreateInput {
  create: [StepperStepCreateInput!]
  connect: [StepperStepWhereUniqueInput!]
}

type StepperProg {
  id: ID!
  name: String
  isCompleted: Boolean
  stepper: Stepper
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
  user: User
}

input StepperProgWhereUniqueInput {
  id: ID
}

input StepperProgWhereInput {
  AND: [StepperProgWhereInput!]
  OR: [StepperProgWhereInput!]
  NOT: [StepperProgWhereInput!]
  id: IDFilter
  name: StringFilter
  isCompleted: BooleanFilter
  stepper: StepperWhereInput
  stepperStepProgs: StepperStepProgManyRelationFilter
  user: UserWhereInput
}

input StepperProgOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isCompleted: OrderDirection
}

input StepperProgUpdateInput {
  name: String
  isCompleted: Boolean
  stepper: StepperRelateToOneForUpdateInput
  stepperStepProgs: StepperStepProgRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input StepperProgUpdateArgs {
  where: StepperProgWhereUniqueInput!
  data: StepperProgUpdateInput!
}

input StepperProgCreateInput {
  name: String
  isCompleted: Boolean
  stepper: StepperRelateToOneForCreateInput
  stepperStepProgs: StepperStepProgRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

type StepperStep {
  id: ID!
  title: String
  description: String
  component: String
  slug: String
  isFinal: Boolean
  order: Int
  stepper: Stepper
  stepperStepProg: StepperStepProg
}

input StepperStepWhereUniqueInput {
  id: ID
}

input StepperStepWhereInput {
  AND: [StepperStepWhereInput!]
  OR: [StepperStepWhereInput!]
  NOT: [StepperStepWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  component: StringFilter
  slug: StringFilter
  isFinal: BooleanFilter
  order: IntFilter
  stepper: StepperWhereInput
  stepperStepProg: StepperStepProgWhereInput
}

input StepperStepOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  component: OrderDirection
  slug: OrderDirection
  isFinal: OrderDirection
  order: OrderDirection
}

input StepperStepUpdateInput {
  title: String
  description: String
  component: String
  slug: String
  isFinal: Boolean
  order: Int
  stepper: StepperRelateToOneForUpdateInput
  stepperStepProg: StepperStepProgRelateToOneForUpdateInput
}

input StepperStepProgRelateToOneForUpdateInput {
  create: StepperStepProgCreateInput
  connect: StepperStepProgWhereUniqueInput
  disconnect: Boolean
}

input StepperStepUpdateArgs {
  where: StepperStepWhereUniqueInput!
  data: StepperStepUpdateInput!
}

input StepperStepCreateInput {
  title: String
  description: String
  component: String
  slug: String
  isFinal: Boolean
  order: Int
  stepper: StepperRelateToOneForCreateInput
  stepperStepProg: StepperStepProgRelateToOneForCreateInput
}

input StepperStepProgRelateToOneForCreateInput {
  create: StepperStepProgCreateInput
  connect: StepperStepProgWhereUniqueInput
}

type StepperStepProg {
  id: ID!
  name: String
  percentDone: Int
  isCompleted: Boolean
  stepper: Stepper
  stepperStep: StepperStep
  stepperProg: StepperProg
  user: User
}

input StepperStepProgWhereUniqueInput {
  id: ID
}

input StepperStepProgWhereInput {
  AND: [StepperStepProgWhereInput!]
  OR: [StepperStepProgWhereInput!]
  NOT: [StepperStepProgWhereInput!]
  id: IDFilter
  name: StringFilter
  percentDone: IntFilter
  isCompleted: BooleanFilter
  stepper: StepperWhereInput
  stepperStep: StepperStepWhereInput
  stepperProg: StepperProgWhereInput
  user: UserWhereInput
}

input StepperStepProgOrderByInput {
  id: OrderDirection
  name: OrderDirection
  percentDone: OrderDirection
  isCompleted: OrderDirection
}

input StepperStepProgUpdateInput {
  name: String
  percentDone: Int
  isCompleted: Boolean
  stepper: StepperRelateToOneForUpdateInput
  stepperStep: StepperStepRelateToOneForUpdateInput
  stepperProg: StepperProgRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input StepperStepRelateToOneForUpdateInput {
  create: StepperStepCreateInput
  connect: StepperStepWhereUniqueInput
  disconnect: Boolean
}

input StepperProgRelateToOneForUpdateInput {
  create: StepperProgCreateInput
  connect: StepperProgWhereUniqueInput
  disconnect: Boolean
}

input StepperStepProgUpdateArgs {
  where: StepperStepProgWhereUniqueInput!
  data: StepperStepProgUpdateInput!
}

input StepperStepProgCreateInput {
  name: String
  percentDone: Int
  isCompleted: Boolean
  stepper: StepperRelateToOneForCreateInput
  stepperStep: StepperStepRelateToOneForCreateInput
  stepperProg: StepperProgRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input StepperStepRelateToOneForCreateInput {
  create: StepperStepCreateInput
  connect: StepperStepWhereUniqueInput
}

input StepperProgRelateToOneForCreateInput {
  create: StepperProgCreateInput
  connect: StepperProgWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(
    where: BookingWhereUniqueInput!
    data: BookingUpdateInput!
  ): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createCalendar(data: CalendarCreateInput!): Calendar
  createCalendars(data: [CalendarCreateInput!]!): [Calendar]
  updateCalendar(
    where: CalendarWhereUniqueInput!
    data: CalendarUpdateInput!
  ): Calendar
  updateCalendars(data: [CalendarUpdateArgs!]!): [Calendar]
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendars(where: [CalendarWhereUniqueInput!]!): [Calendar]
  createDoctor(data: DoctorCreateInput!): Doctor
  createDoctors(data: [DoctorCreateInput!]!): [Doctor]
  updateDoctor(where: DoctorWhereUniqueInput!, data: DoctorUpdateInput!): Doctor
  updateDoctors(data: [DoctorUpdateArgs!]!): [Doctor]
  deleteDoctor(where: DoctorWhereUniqueInput!): Doctor
  deleteDoctors(where: [DoctorWhereUniqueInput!]!): [Doctor]
  createDoctorLanguage(data: DoctorLanguageCreateInput!): DoctorLanguage
  createDoctorLanguages(data: [DoctorLanguageCreateInput!]!): [DoctorLanguage]
  updateDoctorLanguage(
    where: DoctorLanguageWhereUniqueInput!
    data: DoctorLanguageUpdateInput!
  ): DoctorLanguage
  updateDoctorLanguages(data: [DoctorLanguageUpdateArgs!]!): [DoctorLanguage]
  deleteDoctorLanguage(where: DoctorLanguageWhereUniqueInput!): DoctorLanguage
  deleteDoctorLanguages(
    where: [DoctorLanguageWhereUniqueInput!]!
  ): [DoctorLanguage]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPatient(data: PatientCreateInput!): Patient
  createPatients(data: [PatientCreateInput!]!): [Patient]
  updatePatient(
    where: PatientWhereUniqueInput!
    data: PatientUpdateInput!
  ): Patient
  updatePatients(data: [PatientUpdateArgs!]!): [Patient]
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deletePatients(where: [PatientWhereUniqueInput!]!): [Patient]
  createPrompt(data: PromptCreateInput!): Prompt
  createPrompts(data: [PromptCreateInput!]!): [Prompt]
  updatePrompt(where: PromptWhereUniqueInput!, data: PromptUpdateInput!): Prompt
  updatePrompts(data: [PromptUpdateArgs!]!): [Prompt]
  deletePrompt(where: PromptWhereUniqueInput!): Prompt
  deletePrompts(where: [PromptWhereUniqueInput!]!): [Prompt]
  createStepper(data: StepperCreateInput!): Stepper
  createSteppers(data: [StepperCreateInput!]!): [Stepper]
  updateStepper(
    where: StepperWhereUniqueInput!
    data: StepperUpdateInput!
  ): Stepper
  updateSteppers(data: [StepperUpdateArgs!]!): [Stepper]
  deleteStepper(where: StepperWhereUniqueInput!): Stepper
  deleteSteppers(where: [StepperWhereUniqueInput!]!): [Stepper]
  createStepperProg(data: StepperProgCreateInput!): StepperProg
  createStepperProgs(data: [StepperProgCreateInput!]!): [StepperProg]
  updateStepperProg(
    where: StepperProgWhereUniqueInput!
    data: StepperProgUpdateInput!
  ): StepperProg
  updateStepperProgs(data: [StepperProgUpdateArgs!]!): [StepperProg]
  deleteStepperProg(where: StepperProgWhereUniqueInput!): StepperProg
  deleteStepperProgs(where: [StepperProgWhereUniqueInput!]!): [StepperProg]
  createStepperStep(data: StepperStepCreateInput!): StepperStep
  createStepperSteps(data: [StepperStepCreateInput!]!): [StepperStep]
  updateStepperStep(
    where: StepperStepWhereUniqueInput!
    data: StepperStepUpdateInput!
  ): StepperStep
  updateStepperSteps(data: [StepperStepUpdateArgs!]!): [StepperStep]
  deleteStepperStep(where: StepperStepWhereUniqueInput!): StepperStep
  deleteStepperSteps(where: [StepperStepWhereUniqueInput!]!): [StepperStep]
  createStepperStepProg(data: StepperStepProgCreateInput!): StepperStepProg
  createStepperStepProgs(
    data: [StepperStepProgCreateInput!]!
  ): [StepperStepProg]
  updateStepperStepProg(
    where: StepperStepProgWhereUniqueInput!
    data: StepperStepProgUpdateInput!
  ): StepperStepProg
  updateStepperStepProgs(data: [StepperStepProgUpdateArgs!]!): [StepperStepProg]
  deleteStepperStepProg(
    where: StepperStepProgWhereUniqueInput!
  ): StepperStepProg
  deleteStepperStepProgs(
    where: [StepperStepProgWhereUniqueInput!]!
  ): [StepperStepProg]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Query {
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  booking(where: BookingWhereUniqueInput!): Booking
  bookingsCount(where: BookingWhereInput! = {}): Int
  calendars(
    where: CalendarWhereInput! = {}
    orderBy: [CalendarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Calendar!]
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarsCount(where: CalendarWhereInput! = {}): Int
  doctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  doctor(where: DoctorWhereUniqueInput!): Doctor
  doctorsCount(where: DoctorWhereInput! = {}): Int
  doctorLanguages(
    where: DoctorLanguageWhereInput! = {}
    orderBy: [DoctorLanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DoctorLanguage!]
  doctorLanguage(where: DoctorLanguageWhereUniqueInput!): DoctorLanguage
  doctorLanguagesCount(where: DoctorLanguageWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  patients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  patient(where: PatientWhereUniqueInput!): Patient
  patientsCount(where: PatientWhereInput! = {}): Int
  prompts(
    where: PromptWhereInput! = {}
    orderBy: [PromptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prompt!]
  prompt(where: PromptWhereUniqueInput!): Prompt
  promptsCount(where: PromptWhereInput! = {}): Int
  steppers(
    where: StepperWhereInput! = {}
    orderBy: [StepperOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stepper!]
  stepper(where: StepperWhereUniqueInput!): Stepper
  steppersCount(where: StepperWhereInput! = {}): Int
  stepperProgs(
    where: StepperProgWhereInput! = {}
    orderBy: [StepperProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperProg!]
  stepperProg(where: StepperProgWhereUniqueInput!): StepperProg
  stepperProgsCount(where: StepperProgWhereInput! = {}): Int
  stepperSteps(
    where: StepperStepWhereInput! = {}
    orderBy: [StepperStepOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStep!]
  stepperStep(where: StepperStepWhereUniqueInput!): StepperStep
  stepperStepsCount(where: StepperStepWhereInput! = {}): Int
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProg(where: StepperStepProgWhereUniqueInput!): StepperStepProg
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
