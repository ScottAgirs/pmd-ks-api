# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  createCalendarEventBooking(
    eventId: ID!
    reason: String
    tzTarget: String
    startsAt: DateTime
  ): StepperStepProg
  createWalkInAppointment(
    eventId: ID!
    reason: String!
    patientId: ID!
  ): Appointment
  addPatientToDoctor(
    firstName: String!
    lastName: String!
    email: String!
    cellPhoneNumberString: String!
  ): Patient
  acceptInvite(inviteId: ID!): User
  inviteUserByDoctor(
    healthCardNumber: String!
    healthCardVersionCode: String!
    healthCardExpiryDate: DateTime!
    dateOfBirth: DateTime!
    email: String!
    firstName: String!
    lastName: String!
    middleName: String
    cellPhoneNumberString: String!
    sex: String!
  ): UserInvite
  completeMyStepProg(stepId: ID!): StepperStepProg
  createActiveIngredient(data: ActiveIngredientCreateInput!): ActiveIngredient
  createActiveIngredients(
    data: [ActiveIngredientCreateInput!]!
  ): [ActiveIngredient]
  updateActiveIngredient(
    where: ActiveIngredientWhereUniqueInput!
    data: ActiveIngredientUpdateInput!
  ): ActiveIngredient
  updateActiveIngredients(
    data: [ActiveIngredientUpdateArgs!]!
  ): [ActiveIngredient]
  deleteActiveIngredient(
    where: ActiveIngredientWhereUniqueInput!
  ): ActiveIngredient
  deleteActiveIngredients(
    where: [ActiveIngredientWhereUniqueInput!]!
  ): [ActiveIngredient]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createAdministrativeArea(
    data: AdministrativeAreaCreateInput!
  ): AdministrativeArea
  createAdministrativeAreas(
    data: [AdministrativeAreaCreateInput!]!
  ): [AdministrativeArea]
  updateAdministrativeArea(
    where: AdministrativeAreaWhereUniqueInput!
    data: AdministrativeAreaUpdateInput!
  ): AdministrativeArea
  updateAdministrativeAreas(
    data: [AdministrativeAreaUpdateArgs!]!
  ): [AdministrativeArea]
  deleteAdministrativeArea(
    where: AdministrativeAreaWhereUniqueInput!
  ): AdministrativeArea
  deleteAdministrativeAreas(
    where: [AdministrativeAreaWhereUniqueInput!]!
  ): [AdministrativeArea]
  createAppointment(data: AppointmentCreateInput!): Appointment
  createAppointments(data: [AppointmentCreateInput!]!): [Appointment]
  updateAppointment(
    where: AppointmentWhereUniqueInput!
    data: AppointmentUpdateInput!
  ): Appointment
  updateAppointments(data: [AppointmentUpdateArgs!]!): [Appointment]
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteAppointments(where: [AppointmentWhereUniqueInput!]!): [Appointment]
  createAppointmentBilling(
    data: AppointmentBillingCreateInput!
  ): AppointmentBilling
  createAppointmentBillings(
    data: [AppointmentBillingCreateInput!]!
  ): [AppointmentBilling]
  updateAppointmentBilling(
    where: AppointmentBillingWhereUniqueInput!
    data: AppointmentBillingUpdateInput!
  ): AppointmentBilling
  updateAppointmentBillings(
    data: [AppointmentBillingUpdateArgs!]!
  ): [AppointmentBilling]
  deleteAppointmentBilling(
    where: AppointmentBillingWhereUniqueInput!
  ): AppointmentBilling
  deleteAppointmentBillings(
    where: [AppointmentBillingWhereUniqueInput!]!
  ): [AppointmentBilling]
  createAppointmentBillingItem(
    data: AppointmentBillingItemCreateInput!
  ): AppointmentBillingItem
  createAppointmentBillingItems(
    data: [AppointmentBillingItemCreateInput!]!
  ): [AppointmentBillingItem]
  updateAppointmentBillingItem(
    where: AppointmentBillingItemWhereUniqueInput!
    data: AppointmentBillingItemUpdateInput!
  ): AppointmentBillingItem
  updateAppointmentBillingItems(
    data: [AppointmentBillingItemUpdateArgs!]!
  ): [AppointmentBillingItem]
  deleteAppointmentBillingItem(
    where: AppointmentBillingItemWhereUniqueInput!
  ): AppointmentBillingItem
  deleteAppointmentBillingItems(
    where: [AppointmentBillingItemWhereUniqueInput!]!
  ): [AppointmentBillingItem]
  createAppointmentNote(data: AppointmentNoteCreateInput!): AppointmentNote
  createAppointmentNotes(
    data: [AppointmentNoteCreateInput!]!
  ): [AppointmentNote]
  updateAppointmentNote(
    where: AppointmentNoteWhereUniqueInput!
    data: AppointmentNoteUpdateInput!
  ): AppointmentNote
  updateAppointmentNotes(data: [AppointmentNoteUpdateArgs!]!): [AppointmentNote]
  deleteAppointmentNote(
    where: AppointmentNoteWhereUniqueInput!
  ): AppointmentNote
  deleteAppointmentNotes(
    where: [AppointmentNoteWhereUniqueInput!]!
  ): [AppointmentNote]
  createAppointmentRequest(
    data: AppointmentRequestCreateInput!
  ): AppointmentRequest
  createAppointmentRequests(
    data: [AppointmentRequestCreateInput!]!
  ): [AppointmentRequest]
  updateAppointmentRequest(
    where: AppointmentRequestWhereUniqueInput!
    data: AppointmentRequestUpdateInput!
  ): AppointmentRequest
  updateAppointmentRequests(
    data: [AppointmentRequestUpdateArgs!]!
  ): [AppointmentRequest]
  deleteAppointmentRequest(
    where: AppointmentRequestWhereUniqueInput!
  ): AppointmentRequest
  deleteAppointmentRequests(
    where: [AppointmentRequestWhereUniqueInput!]!
  ): [AppointmentRequest]
  createAppointmentVital(data: AppointmentVitalCreateInput!): AppointmentVital
  createAppointmentVitals(
    data: [AppointmentVitalCreateInput!]!
  ): [AppointmentVital]
  updateAppointmentVital(
    where: AppointmentVitalWhereUniqueInput!
    data: AppointmentVitalUpdateInput!
  ): AppointmentVital
  updateAppointmentVitals(
    data: [AppointmentVitalUpdateArgs!]!
  ): [AppointmentVital]
  deleteAppointmentVital(
    where: AppointmentVitalWhereUniqueInput!
  ): AppointmentVital
  deleteAppointmentVitals(
    where: [AppointmentVitalWhereUniqueInput!]!
  ): [AppointmentVital]
  createBillingClaim(data: BillingClaimCreateInput!): BillingClaim
  createBillingClaims(data: [BillingClaimCreateInput!]!): [BillingClaim]
  updateBillingClaim(
    where: BillingClaimWhereUniqueInput!
    data: BillingClaimUpdateInput!
  ): BillingClaim
  updateBillingClaims(data: [BillingClaimUpdateArgs!]!): [BillingClaim]
  deleteBillingClaim(where: BillingClaimWhereUniqueInput!): BillingClaim
  deleteBillingClaims(where: [BillingClaimWhereUniqueInput!]!): [BillingClaim]
  createBillingDiagnosis(data: BillingDiagnosisCreateInput!): BillingDiagnosis
  createBillingDiagnoses(
    data: [BillingDiagnosisCreateInput!]!
  ): [BillingDiagnosis]
  updateBillingDiagnosis(
    where: BillingDiagnosisWhereUniqueInput!
    data: BillingDiagnosisUpdateInput!
  ): BillingDiagnosis
  updateBillingDiagnoses(
    data: [BillingDiagnosisUpdateArgs!]!
  ): [BillingDiagnosis]
  deleteBillingDiagnosis(
    where: BillingDiagnosisWhereUniqueInput!
  ): BillingDiagnosis
  deleteBillingDiagnoses(
    where: [BillingDiagnosisWhereUniqueInput!]!
  ): [BillingDiagnosis]
  createBooking(data: BookingCreateInput!): Booking
  createBookings(data: [BookingCreateInput!]!): [Booking]
  updateBooking(
    where: BookingWhereUniqueInput!
    data: BookingUpdateInput!
  ): Booking
  updateBookings(data: [BookingUpdateArgs!]!): [Booking]
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteBookings(where: [BookingWhereUniqueInput!]!): [Booking]
  createCalendar(data: CalendarCreateInput!): Calendar
  createCalendars(data: [CalendarCreateInput!]!): [Calendar]
  updateCalendar(
    where: CalendarWhereUniqueInput!
    data: CalendarUpdateInput!
  ): Calendar
  updateCalendars(data: [CalendarUpdateArgs!]!): [Calendar]
  deleteCalendar(where: CalendarWhereUniqueInput!): Calendar
  deleteCalendars(where: [CalendarWhereUniqueInput!]!): [Calendar]
  createCalendarEvent(data: CalendarEventCreateInput!): CalendarEvent
  createCalendarEvents(data: [CalendarEventCreateInput!]!): [CalendarEvent]
  updateCalendarEvent(
    where: CalendarEventWhereUniqueInput!
    data: CalendarEventUpdateInput!
  ): CalendarEvent
  updateCalendarEvents(data: [CalendarEventUpdateArgs!]!): [CalendarEvent]
  deleteCalendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  deleteCalendarEvents(
    where: [CalendarEventWhereUniqueInput!]!
  ): [CalendarEvent]
  createCalendarEventType(
    data: CalendarEventTypeCreateInput!
  ): CalendarEventType
  createCalendarEventTypes(
    data: [CalendarEventTypeCreateInput!]!
  ): [CalendarEventType]
  updateCalendarEventType(
    where: CalendarEventTypeWhereUniqueInput!
    data: CalendarEventTypeUpdateInput!
  ): CalendarEventType
  updateCalendarEventTypes(
    data: [CalendarEventTypeUpdateArgs!]!
  ): [CalendarEventType]
  deleteCalendarEventType(
    where: CalendarEventTypeWhereUniqueInput!
  ): CalendarEventType
  deleteCalendarEventTypes(
    where: [CalendarEventTypeWhereUniqueInput!]!
  ): [CalendarEventType]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(
    where: CompanyWhereUniqueInput!
    data: CompanyUpdateInput!
  ): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createCompanyLocation(data: CompanyLocationCreateInput!): CompanyLocation
  createCompanyLocations(
    data: [CompanyLocationCreateInput!]!
  ): [CompanyLocation]
  updateCompanyLocation(
    where: CompanyLocationWhereUniqueInput!
    data: CompanyLocationUpdateInput!
  ): CompanyLocation
  updateCompanyLocations(data: [CompanyLocationUpdateArgs!]!): [CompanyLocation]
  deleteCompanyLocation(
    where: CompanyLocationWhereUniqueInput!
  ): CompanyLocation
  deleteCompanyLocations(
    where: [CompanyLocationWhereUniqueInput!]!
  ): [CompanyLocation]
  createContract(data: ContractCreateInput!): Contract
  createContracts(data: [ContractCreateInput!]!): [Contract]
  updateContract(
    where: ContractWhereUniqueInput!
    data: ContractUpdateInput!
  ): Contract
  updateContracts(data: [ContractUpdateArgs!]!): [Contract]
  deleteContract(where: ContractWhereUniqueInput!): Contract
  deleteContracts(where: [ContractWhereUniqueInput!]!): [Contract]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(
    where: CountryWhereUniqueInput!
    data: CountryUpdateInput!
  ): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createDoctor(data: DoctorCreateInput!): Doctor
  createDoctors(data: [DoctorCreateInput!]!): [Doctor]
  updateDoctor(where: DoctorWhereUniqueInput!, data: DoctorUpdateInput!): Doctor
  updateDoctors(data: [DoctorUpdateArgs!]!): [Doctor]
  deleteDoctor(where: DoctorWhereUniqueInput!): Doctor
  deleteDoctors(where: [DoctorWhereUniqueInput!]!): [Doctor]
  createDoctorSpecialty(data: DoctorSpecialtyCreateInput!): DoctorSpecialty
  createDoctorSpecialties(
    data: [DoctorSpecialtyCreateInput!]!
  ): [DoctorSpecialty]
  updateDoctorSpecialty(
    where: DoctorSpecialtyWhereUniqueInput!
    data: DoctorSpecialtyUpdateInput!
  ): DoctorSpecialty
  updateDoctorSpecialties(
    data: [DoctorSpecialtyUpdateArgs!]!
  ): [DoctorSpecialty]
  deleteDoctorSpecialty(
    where: DoctorSpecialtyWhereUniqueInput!
  ): DoctorSpecialty
  deleteDoctorSpecialties(
    where: [DoctorSpecialtyWhereUniqueInput!]!
  ): [DoctorSpecialty]
  createDoctorSubSpecialty(
    data: DoctorSubSpecialtyCreateInput!
  ): DoctorSubSpecialty
  createDoctorSubSpecialties(
    data: [DoctorSubSpecialtyCreateInput!]!
  ): [DoctorSubSpecialty]
  updateDoctorSubSpecialty(
    where: DoctorSubSpecialtyWhereUniqueInput!
    data: DoctorSubSpecialtyUpdateInput!
  ): DoctorSubSpecialty
  updateDoctorSubSpecialties(
    data: [DoctorSubSpecialtyUpdateArgs!]!
  ): [DoctorSubSpecialty]
  deleteDoctorSubSpecialty(
    where: DoctorSubSpecialtyWhereUniqueInput!
  ): DoctorSubSpecialty
  deleteDoctorSubSpecialties(
    where: [DoctorSubSpecialtyWhereUniqueInput!]!
  ): [DoctorSubSpecialty]
  createEmergencyContact(data: EmergencyContactCreateInput!): EmergencyContact
  createEmergencyContacts(
    data: [EmergencyContactCreateInput!]!
  ): [EmergencyContact]
  updateEmergencyContact(
    where: EmergencyContactWhereUniqueInput!
    data: EmergencyContactUpdateInput!
  ): EmergencyContact
  updateEmergencyContacts(
    data: [EmergencyContactUpdateArgs!]!
  ): [EmergencyContact]
  deleteEmergencyContact(
    where: EmergencyContactWhereUniqueInput!
  ): EmergencyContact
  deleteEmergencyContacts(
    where: [EmergencyContactWhereUniqueInput!]!
  ): [EmergencyContact]
  createForm(data: FormCreateInput!): Form
  createForms(data: [FormCreateInput!]!): [Form]
  updateForm(where: FormWhereUniqueInput!, data: FormUpdateInput!): Form
  updateForms(data: [FormUpdateArgs!]!): [Form]
  deleteForm(where: FormWhereUniqueInput!): Form
  deleteForms(where: [FormWhereUniqueInput!]!): [Form]
  createFormType(data: FormTypeCreateInput!): FormType
  createFormTypes(data: [FormTypeCreateInput!]!): [FormType]
  updateFormType(
    where: FormTypeWhereUniqueInput!
    data: FormTypeUpdateInput!
  ): FormType
  updateFormTypes(data: [FormTypeUpdateArgs!]!): [FormType]
  deleteFormType(where: FormTypeWhereUniqueInput!): FormType
  deleteFormTypes(where: [FormTypeWhereUniqueInput!]!): [FormType]
  createHealthCard(data: HealthCardCreateInput!): HealthCard
  createHealthCards(data: [HealthCardCreateInput!]!): [HealthCard]
  updateHealthCard(
    where: HealthCardWhereUniqueInput!
    data: HealthCardUpdateInput!
  ): HealthCard
  updateHealthCards(data: [HealthCardUpdateArgs!]!): [HealthCard]
  deleteHealthCard(where: HealthCardWhereUniqueInput!): HealthCard
  deleteHealthCards(where: [HealthCardWhereUniqueInput!]!): [HealthCard]
  createLanguage(data: LanguageCreateInput!): Language
  createLanguages(data: [LanguageCreateInput!]!): [Language]
  updateLanguage(
    where: LanguageWhereUniqueInput!
    data: LanguageUpdateInput!
  ): Language
  updateLanguages(data: [LanguageUpdateArgs!]!): [Language]
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteLanguages(where: [LanguageWhereUniqueInput!]!): [Language]
  createMedication(data: MedicationCreateInput!): Medication
  createMedications(data: [MedicationCreateInput!]!): [Medication]
  updateMedication(
    where: MedicationWhereUniqueInput!
    data: MedicationUpdateInput!
  ): Medication
  updateMedications(data: [MedicationUpdateArgs!]!): [Medication]
  deleteMedication(where: MedicationWhereUniqueInput!): Medication
  deleteMedications(where: [MedicationWhereUniqueInput!]!): [Medication]
  createPatient(data: PatientCreateInput!): Patient
  createPatients(data: [PatientCreateInput!]!): [Patient]
  updatePatient(
    where: PatientWhereUniqueInput!
    data: PatientUpdateInput!
  ): Patient
  updatePatients(data: [PatientUpdateArgs!]!): [Patient]
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deletePatients(where: [PatientWhereUniqueInput!]!): [Patient]
  createPharmacy(data: PharmacyCreateInput!): Pharmacy
  createPharmacies(data: [PharmacyCreateInput!]!): [Pharmacy]
  updatePharmacy(
    where: PharmacyWhereUniqueInput!
    data: PharmacyUpdateInput!
  ): Pharmacy
  updatePharmacies(data: [PharmacyUpdateArgs!]!): [Pharmacy]
  deletePharmacy(where: PharmacyWhereUniqueInput!): Pharmacy
  deletePharmacies(where: [PharmacyWhereUniqueInput!]!): [Pharmacy]
  createPharmacyLocation(data: PharmacyLocationCreateInput!): PharmacyLocation
  createPharmacyLocations(
    data: [PharmacyLocationCreateInput!]!
  ): [PharmacyLocation]
  updatePharmacyLocation(
    where: PharmacyLocationWhereUniqueInput!
    data: PharmacyLocationUpdateInput!
  ): PharmacyLocation
  updatePharmacyLocations(
    data: [PharmacyLocationUpdateArgs!]!
  ): [PharmacyLocation]
  deletePharmacyLocation(
    where: PharmacyLocationWhereUniqueInput!
  ): PharmacyLocation
  deletePharmacyLocations(
    where: [PharmacyLocationWhereUniqueInput!]!
  ): [PharmacyLocation]
  createPrescription(data: PrescriptionCreateInput!): Prescription
  createPrescriptions(data: [PrescriptionCreateInput!]!): [Prescription]
  updatePrescription(
    where: PrescriptionWhereUniqueInput!
    data: PrescriptionUpdateInput!
  ): Prescription
  updatePrescriptions(data: [PrescriptionUpdateArgs!]!): [Prescription]
  deletePrescription(where: PrescriptionWhereUniqueInput!): Prescription
  deletePrescriptions(where: [PrescriptionWhereUniqueInput!]!): [Prescription]
  createPrescriptionItem(data: PrescriptionItemCreateInput!): PrescriptionItem
  createPrescriptionItems(
    data: [PrescriptionItemCreateInput!]!
  ): [PrescriptionItem]
  updatePrescriptionItem(
    where: PrescriptionItemWhereUniqueInput!
    data: PrescriptionItemUpdateInput!
  ): PrescriptionItem
  updatePrescriptionItems(
    data: [PrescriptionItemUpdateArgs!]!
  ): [PrescriptionItem]
  deletePrescriptionItem(
    where: PrescriptionItemWhereUniqueInput!
  ): PrescriptionItem
  deletePrescriptionItems(
    where: [PrescriptionItemWhereUniqueInput!]!
  ): [PrescriptionItem]
  createProfilePhoto(data: ProfilePhotoCreateInput!): ProfilePhoto
  createProfilePhotos(data: [ProfilePhotoCreateInput!]!): [ProfilePhoto]
  updateProfilePhoto(
    where: ProfilePhotoWhereUniqueInput!
    data: ProfilePhotoUpdateInput!
  ): ProfilePhoto
  updateProfilePhotos(data: [ProfilePhotoUpdateArgs!]!): [ProfilePhoto]
  deleteProfilePhoto(where: ProfilePhotoWhereUniqueInput!): ProfilePhoto
  deleteProfilePhotos(where: [ProfilePhotoWhereUniqueInput!]!): [ProfilePhoto]
  createPrompt(data: PromptCreateInput!): Prompt
  createPrompts(data: [PromptCreateInput!]!): [Prompt]
  updatePrompt(where: PromptWhereUniqueInput!, data: PromptUpdateInput!): Prompt
  updatePrompts(data: [PromptUpdateArgs!]!): [Prompt]
  deletePrompt(where: PromptWhereUniqueInput!): Prompt
  deletePrompts(where: [PromptWhereUniqueInput!]!): [Prompt]
  createProofOfIdentification(
    data: ProofOfIdentificationCreateInput!
  ): ProofOfIdentification
  createProofOfIdentifications(
    data: [ProofOfIdentificationCreateInput!]!
  ): [ProofOfIdentification]
  updateProofOfIdentification(
    where: ProofOfIdentificationWhereUniqueInput!
    data: ProofOfIdentificationUpdateInput!
  ): ProofOfIdentification
  updateProofOfIdentifications(
    data: [ProofOfIdentificationUpdateArgs!]!
  ): [ProofOfIdentification]
  deleteProofOfIdentification(
    where: ProofOfIdentificationWhereUniqueInput!
  ): ProofOfIdentification
  deleteProofOfIdentifications(
    where: [ProofOfIdentificationWhereUniqueInput!]!
  ): [ProofOfIdentification]
  createProofOfInsurance(data: ProofOfInsuranceCreateInput!): ProofOfInsurance
  createProofOfInsurances(
    data: [ProofOfInsuranceCreateInput!]!
  ): [ProofOfInsurance]
  updateProofOfInsurance(
    where: ProofOfInsuranceWhereUniqueInput!
    data: ProofOfInsuranceUpdateInput!
  ): ProofOfInsurance
  updateProofOfInsurances(
    data: [ProofOfInsuranceUpdateArgs!]!
  ): [ProofOfInsurance]
  deleteProofOfInsurance(
    where: ProofOfInsuranceWhereUniqueInput!
  ): ProofOfInsurance
  deleteProofOfInsurances(
    where: [ProofOfInsuranceWhereUniqueInput!]!
  ): [ProofOfInsurance]
  createProofOfLicense(data: ProofOfLicenseCreateInput!): ProofOfLicense
  createProofOfLicenses(data: [ProofOfLicenseCreateInput!]!): [ProofOfLicense]
  updateProofOfLicense(
    where: ProofOfLicenseWhereUniqueInput!
    data: ProofOfLicenseUpdateInput!
  ): ProofOfLicense
  updateProofOfLicenses(data: [ProofOfLicenseUpdateArgs!]!): [ProofOfLicense]
  deleteProofOfLicense(where: ProofOfLicenseWhereUniqueInput!): ProofOfLicense
  deleteProofOfLicenses(
    where: [ProofOfLicenseWhereUniqueInput!]!
  ): [ProofOfLicense]
  createRecurringSlot(data: RecurringSlotCreateInput!): RecurringSlot
  createRecurringSlots(data: [RecurringSlotCreateInput!]!): [RecurringSlot]
  updateRecurringSlot(
    where: RecurringSlotWhereUniqueInput!
    data: RecurringSlotUpdateInput!
  ): RecurringSlot
  updateRecurringSlots(data: [RecurringSlotUpdateArgs!]!): [RecurringSlot]
  deleteRecurringSlot(where: RecurringSlotWhereUniqueInput!): RecurringSlot
  deleteRecurringSlots(
    where: [RecurringSlotWhereUniqueInput!]!
  ): [RecurringSlot]
  createSchedule(data: ScheduleCreateInput!): Schedule
  createSchedules(data: [ScheduleCreateInput!]!): [Schedule]
  updateSchedule(
    where: ScheduleWhereUniqueInput!
    data: ScheduleUpdateInput!
  ): Schedule
  updateSchedules(data: [ScheduleUpdateArgs!]!): [Schedule]
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteSchedules(where: [ScheduleWhereUniqueInput!]!): [Schedule]
  createStepper(data: StepperCreateInput!): Stepper
  createSteppers(data: [StepperCreateInput!]!): [Stepper]
  updateStepper(
    where: StepperWhereUniqueInput!
    data: StepperUpdateInput!
  ): Stepper
  updateSteppers(data: [StepperUpdateArgs!]!): [Stepper]
  deleteStepper(where: StepperWhereUniqueInput!): Stepper
  deleteSteppers(where: [StepperWhereUniqueInput!]!): [Stepper]
  createStepperProg(data: StepperProgCreateInput!): StepperProg
  createStepperProgs(data: [StepperProgCreateInput!]!): [StepperProg]
  updateStepperProg(
    where: StepperProgWhereUniqueInput!
    data: StepperProgUpdateInput!
  ): StepperProg
  updateStepperProgs(data: [StepperProgUpdateArgs!]!): [StepperProg]
  deleteStepperProg(where: StepperProgWhereUniqueInput!): StepperProg
  deleteStepperProgs(where: [StepperProgWhereUniqueInput!]!): [StepperProg]
  createStepperStep(data: StepperStepCreateInput!): StepperStep
  createStepperSteps(data: [StepperStepCreateInput!]!): [StepperStep]
  updateStepperStep(
    where: StepperStepWhereUniqueInput!
    data: StepperStepUpdateInput!
  ): StepperStep
  updateStepperSteps(data: [StepperStepUpdateArgs!]!): [StepperStep]
  deleteStepperStep(where: StepperStepWhereUniqueInput!): StepperStep
  deleteStepperSteps(where: [StepperStepWhereUniqueInput!]!): [StepperStep]
  createStepperStepProg(data: StepperStepProgCreateInput!): StepperStepProg
  createStepperStepProgs(
    data: [StepperStepProgCreateInput!]!
  ): [StepperStepProg]
  updateStepperStepProg(
    where: StepperStepProgWhereUniqueInput!
    data: StepperStepProgUpdateInput!
  ): StepperStepProg
  updateStepperStepProgs(data: [StepperStepProgUpdateArgs!]!): [StepperStepProg]
  deleteStepperStepProg(
    where: StepperStepProgWhereUniqueInput!
  ): StepperStepProg
  deleteStepperStepProgs(
    where: [StepperStepProgWhereUniqueInput!]!
  ): [StepperStepProg]
  createTimeInterval(data: TimeIntervalCreateInput!): TimeInterval
  createTimeIntervals(data: [TimeIntervalCreateInput!]!): [TimeInterval]
  updateTimeInterval(
    where: TimeIntervalWhereUniqueInput!
    data: TimeIntervalUpdateInput!
  ): TimeInterval
  updateTimeIntervals(data: [TimeIntervalUpdateArgs!]!): [TimeInterval]
  deleteTimeInterval(where: TimeIntervalWhereUniqueInput!): TimeInterval
  deleteTimeIntervals(where: [TimeIntervalWhereUniqueInput!]!): [TimeInterval]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserInvite(data: UserInviteCreateInput!): UserInvite
  createUserInvites(data: [UserInviteCreateInput!]!): [UserInvite]
  updateUserInvite(
    where: UserInviteWhereUniqueInput!
    data: UserInviteUpdateInput!
  ): UserInvite
  updateUserInvites(data: [UserInviteUpdateArgs!]!): [UserInvite]
  deleteUserInvite(where: UserInviteWhereUniqueInput!): UserInvite
  deleteUserInvites(where: [UserInviteWhereUniqueInput!]!): [UserInvite]
  endSession: Boolean!
}

type ActiveIngredient {
  id: ID!
  drugCode: String
  ingredientName: String
  strengthUnit: String
  strengthValue: String
  medication: Medication
}

input ActiveIngredientWhereUniqueInput {
  id: ID
}

input ActiveIngredientWhereInput {
  AND: [ActiveIngredientWhereInput!]
  OR: [ActiveIngredientWhereInput!]
  NOT: [ActiveIngredientWhereInput!]
  id: IDFilter
  drugCode: StringFilter
  ingredientName: StringFilter
  strengthUnit: StringFilter
  strengthValue: StringFilter
  medication: MedicationWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ActiveIngredientOrderByInput {
  id: OrderDirection
  drugCode: OrderDirection
  ingredientName: OrderDirection
  strengthUnit: OrderDirection
  strengthValue: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActiveIngredientUpdateInput {
  drugCode: String
  ingredientName: String
  strengthUnit: String
  strengthValue: String
  medication: MedicationRelateToOneForUpdateInput
}

input MedicationRelateToOneForUpdateInput {
  create: MedicationCreateInput
  connect: MedicationWhereUniqueInput
  disconnect: Boolean
}

input ActiveIngredientUpdateArgs {
  where: ActiveIngredientWhereUniqueInput!
  data: ActiveIngredientUpdateInput!
}

input ActiveIngredientCreateInput {
  drugCode: String
  ingredientName: String
  strengthUnit: String
  strengthValue: String
  medication: MedicationRelateToOneForCreateInput
}

input MedicationRelateToOneForCreateInput {
  create: MedicationCreateInput
  connect: MedicationWhereUniqueInput
}

type Address {
  id: ID!
  addressLine1: String
  addressLine2: String
  administrativeArea: String
  country: String
  locality: String
  postalCode: String
  premise: String
  thoroughfare: String
  event: CalendarEvent
  pharmacyLocation: PharmacyLocation
  user: User
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  addressLine1: StringFilter
  addressLine2: StringFilter
  administrativeArea: StringFilter
  country: StringFilter
  locality: StringFilter
  postalCode: StringFilter
  premise: StringFilter
  thoroughfare: StringFilter
  event: CalendarEventWhereInput
  pharmacyLocation: PharmacyLocationWhereInput
  user: UserWhereInput
}

input AddressOrderByInput {
  id: OrderDirection
  addressLine1: OrderDirection
  addressLine2: OrderDirection
  administrativeArea: OrderDirection
  country: OrderDirection
  locality: OrderDirection
  postalCode: OrderDirection
  premise: OrderDirection
  thoroughfare: OrderDirection
}

input AddressUpdateInput {
  addressLine1: String
  addressLine2: String
  administrativeArea: String
  country: String
  locality: String
  postalCode: String
  premise: String
  thoroughfare: String
  event: CalendarEventRelateToOneForUpdateInput
  pharmacyLocation: PharmacyLocationRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input CalendarEventRelateToOneForUpdateInput {
  create: CalendarEventCreateInput
  connect: CalendarEventWhereUniqueInput
  disconnect: Boolean
}

input PharmacyLocationRelateToOneForUpdateInput {
  create: PharmacyLocationCreateInput
  connect: PharmacyLocationWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  addressLine1: String
  addressLine2: String
  administrativeArea: String
  country: String
  locality: String
  postalCode: String
  premise: String
  thoroughfare: String
  event: CalendarEventRelateToOneForCreateInput
  pharmacyLocation: PharmacyLocationRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input CalendarEventRelateToOneForCreateInput {
  create: CalendarEventCreateInput
  connect: CalendarEventWhereUniqueInput
}

input PharmacyLocationRelateToOneForCreateInput {
  create: PharmacyLocationCreateInput
  connect: PharmacyLocationWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type AdministrativeArea {
  id: ID!
  isActive: Boolean
  label: String
  value: String
  country: Country
}

input AdministrativeAreaWhereUniqueInput {
  id: ID
}

input AdministrativeAreaWhereInput {
  AND: [AdministrativeAreaWhereInput!]
  OR: [AdministrativeAreaWhereInput!]
  NOT: [AdministrativeAreaWhereInput!]
  id: IDFilter
  isActive: BooleanFilter
  label: StringFilter
  value: StringFilter
  country: CountryWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AdministrativeAreaOrderByInput {
  id: OrderDirection
  isActive: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input AdministrativeAreaUpdateInput {
  isActive: Boolean
  label: String
  value: String
  country: CountryRelateToOneForUpdateInput
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input AdministrativeAreaUpdateArgs {
  where: AdministrativeAreaWhereUniqueInput!
  data: AdministrativeAreaUpdateInput!
}

input AdministrativeAreaCreateInput {
  isActive: Boolean
  label: String
  value: String
  country: CountryRelateToOneForCreateInput
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

type Appointment {
  id: ID!
  endedAt: DateTime
  isSigned: Boolean
  isSignedOn: DateTime
  reason: String
  scheduledEndsAt: DateTime
  scheduledStartsAt: DateTime
  startedAt: DateTime
  summary: Appointment_summary_Document
  summaryString: String
  billing: AppointmentBilling
  booking: Booking
  doctor: Doctor
  event: CalendarEvent
  forms(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formsCount(where: FormWhereInput! = {}): Int
  notes(
    where: AppointmentNoteWhereInput! = {}
    orderBy: [AppointmentNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentNote!]
  notesCount(where: AppointmentNoteWhereInput! = {}): Int
  patient: Patient
  prescription: Prescription
  vitalsData: AppointmentVital
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Appointment_summary_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AppointmentWhereUniqueInput {
  id: ID
}

input AppointmentWhereInput {
  AND: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  NOT: [AppointmentWhereInput!]
  id: IDFilter
  endedAt: DateTimeNullableFilter
  isSigned: BooleanFilter
  isSignedOn: DateTimeNullableFilter
  reason: StringFilter
  scheduledEndsAt: DateTimeNullableFilter
  scheduledStartsAt: DateTimeNullableFilter
  startedAt: DateTimeNullableFilter
  summaryString: StringFilter
  billing: AppointmentBillingWhereInput
  booking: BookingWhereInput
  doctor: DoctorWhereInput
  event: CalendarEventWhereInput
  forms: FormManyRelationFilter
  notes: AppointmentNoteManyRelationFilter
  patient: PatientWhereInput
  prescription: PrescriptionWhereInput
  vitalsData: AppointmentVitalWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FormManyRelationFilter {
  every: FormWhereInput
  some: FormWhereInput
  none: FormWhereInput
}

input AppointmentNoteManyRelationFilter {
  every: AppointmentNoteWhereInput
  some: AppointmentNoteWhereInput
  none: AppointmentNoteWhereInput
}

input AppointmentOrderByInput {
  id: OrderDirection
  endedAt: OrderDirection
  isSigned: OrderDirection
  isSignedOn: OrderDirection
  reason: OrderDirection
  scheduledEndsAt: OrderDirection
  scheduledStartsAt: OrderDirection
  startedAt: OrderDirection
  summaryString: OrderDirection
}

input AppointmentUpdateInput {
  endedAt: DateTime
  isSigned: Boolean
  isSignedOn: DateTime
  reason: String
  scheduledEndsAt: DateTime
  scheduledStartsAt: DateTime
  startedAt: DateTime
  summary: JSON
  summaryString: String
  billing: AppointmentBillingRelateToOneForUpdateInput
  booking: BookingRelateToOneForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
  event: CalendarEventRelateToOneForUpdateInput
  forms: FormRelateToManyForUpdateInput
  notes: AppointmentNoteRelateToManyForUpdateInput
  patient: PatientRelateToOneForUpdateInput
  prescription: PrescriptionRelateToOneForUpdateInput
  vitalsData: AppointmentVitalRelateToOneForUpdateInput
}

input AppointmentBillingRelateToOneForUpdateInput {
  create: AppointmentBillingCreateInput
  connect: AppointmentBillingWhereUniqueInput
  disconnect: Boolean
}

input BookingRelateToOneForUpdateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
  disconnect: Boolean
}

input DoctorRelateToOneForUpdateInput {
  create: DoctorCreateInput
  connect: DoctorWhereUniqueInput
  disconnect: Boolean
}

input FormRelateToManyForUpdateInput {
  disconnect: [FormWhereUniqueInput!]
  set: [FormWhereUniqueInput!]
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

input AppointmentNoteRelateToManyForUpdateInput {
  disconnect: [AppointmentNoteWhereUniqueInput!]
  set: [AppointmentNoteWhereUniqueInput!]
  create: [AppointmentNoteCreateInput!]
  connect: [AppointmentNoteWhereUniqueInput!]
}

input PatientRelateToOneForUpdateInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
  disconnect: Boolean
}

input PrescriptionRelateToOneForUpdateInput {
  create: PrescriptionCreateInput
  connect: PrescriptionWhereUniqueInput
  disconnect: Boolean
}

input AppointmentVitalRelateToOneForUpdateInput {
  create: AppointmentVitalCreateInput
  connect: AppointmentVitalWhereUniqueInput
  disconnect: Boolean
}

input AppointmentUpdateArgs {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateInput!
}

input AppointmentCreateInput {
  endedAt: DateTime
  isSigned: Boolean
  isSignedOn: DateTime
  reason: String
  scheduledEndsAt: DateTime
  scheduledStartsAt: DateTime
  startedAt: DateTime
  summary: JSON
  summaryString: String
  billing: AppointmentBillingRelateToOneForCreateInput
  booking: BookingRelateToOneForCreateInput
  doctor: DoctorRelateToOneForCreateInput
  event: CalendarEventRelateToOneForCreateInput
  forms: FormRelateToManyForCreateInput
  notes: AppointmentNoteRelateToManyForCreateInput
  patient: PatientRelateToOneForCreateInput
  prescription: PrescriptionRelateToOneForCreateInput
  vitalsData: AppointmentVitalRelateToOneForCreateInput
}

input AppointmentBillingRelateToOneForCreateInput {
  create: AppointmentBillingCreateInput
  connect: AppointmentBillingWhereUniqueInput
}

input BookingRelateToOneForCreateInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
}

input DoctorRelateToOneForCreateInput {
  create: DoctorCreateInput
  connect: DoctorWhereUniqueInput
}

input FormRelateToManyForCreateInput {
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

input AppointmentNoteRelateToManyForCreateInput {
  create: [AppointmentNoteCreateInput!]
  connect: [AppointmentNoteWhereUniqueInput!]
}

input PatientRelateToOneForCreateInput {
  create: PatientCreateInput
  connect: PatientWhereUniqueInput
}

input PrescriptionRelateToOneForCreateInput {
  create: PrescriptionCreateInput
  connect: PrescriptionWhereUniqueInput
}

input AppointmentVitalRelateToOneForCreateInput {
  create: AppointmentVitalCreateInput
  connect: AppointmentVitalWhereUniqueInput
}

type AppointmentBilling {
  id: ID!
  referringDoctorNumber: String
  status: String
  appointment: Appointment
  billingItems(
    where: AppointmentBillingItemWhereInput! = {}
    orderBy: [AppointmentBillingItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentBillingItem!]
  billingItemsCount(where: AppointmentBillingItemWhereInput! = {}): Int
  doctor: Doctor
}

input AppointmentBillingWhereUniqueInput {
  id: ID
}

input AppointmentBillingWhereInput {
  AND: [AppointmentBillingWhereInput!]
  OR: [AppointmentBillingWhereInput!]
  NOT: [AppointmentBillingWhereInput!]
  id: IDFilter
  referringDoctorNumber: StringFilter
  status: StringFilter
  appointment: AppointmentWhereInput
  billingItems: AppointmentBillingItemManyRelationFilter
  doctor: DoctorWhereInput
}

input AppointmentBillingItemManyRelationFilter {
  every: AppointmentBillingItemWhereInput
  some: AppointmentBillingItemWhereInput
  none: AppointmentBillingItemWhereInput
}

input AppointmentBillingOrderByInput {
  id: OrderDirection
  referringDoctorNumber: OrderDirection
  status: OrderDirection
}

input AppointmentBillingUpdateInput {
  referringDoctorNumber: String
  status: String
  appointment: AppointmentRelateToOneForUpdateInput
  billingItems: AppointmentBillingItemRelateToManyForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
}

input AppointmentRelateToOneForUpdateInput {
  create: AppointmentCreateInput
  connect: AppointmentWhereUniqueInput
  disconnect: Boolean
}

input AppointmentBillingItemRelateToManyForUpdateInput {
  disconnect: [AppointmentBillingItemWhereUniqueInput!]
  set: [AppointmentBillingItemWhereUniqueInput!]
  create: [AppointmentBillingItemCreateInput!]
  connect: [AppointmentBillingItemWhereUniqueInput!]
}

input AppointmentBillingUpdateArgs {
  where: AppointmentBillingWhereUniqueInput!
  data: AppointmentBillingUpdateInput!
}

input AppointmentBillingCreateInput {
  referringDoctorNumber: String
  status: String
  appointment: AppointmentRelateToOneForCreateInput
  billingItems: AppointmentBillingItemRelateToManyForCreateInput
  doctor: DoctorRelateToOneForCreateInput
}

input AppointmentRelateToOneForCreateInput {
  create: AppointmentCreateInput
  connect: AppointmentWhereUniqueInput
}

input AppointmentBillingItemRelateToManyForCreateInput {
  create: [AppointmentBillingItemCreateInput!]
  connect: [AppointmentBillingItemWhereUniqueInput!]
}

type AppointmentBillingItem {
  id: ID!
  diagnosisCode: String
  premiumCode: String
  units: Int
  billing: AppointmentBilling
  claim: BillingClaim
  diagnosis: BillingDiagnosis
}

input AppointmentBillingItemWhereUniqueInput {
  id: ID
}

input AppointmentBillingItemWhereInput {
  AND: [AppointmentBillingItemWhereInput!]
  OR: [AppointmentBillingItemWhereInput!]
  NOT: [AppointmentBillingItemWhereInput!]
  id: IDFilter
  diagnosisCode: StringFilter
  premiumCode: StringFilter
  units: IntNullableFilter
  billing: AppointmentBillingWhereInput
  claim: BillingClaimWhereInput
  diagnosis: BillingDiagnosisWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AppointmentBillingItemOrderByInput {
  id: OrderDirection
  diagnosisCode: OrderDirection
  premiumCode: OrderDirection
  units: OrderDirection
}

input AppointmentBillingItemUpdateInput {
  diagnosisCode: String
  premiumCode: String
  units: Int
  billing: AppointmentBillingRelateToOneForUpdateInput
  claim: BillingClaimRelateToOneForUpdateInput
  diagnosis: BillingDiagnosisRelateToOneForUpdateInput
}

input BillingClaimRelateToOneForUpdateInput {
  create: BillingClaimCreateInput
  connect: BillingClaimWhereUniqueInput
  disconnect: Boolean
}

input BillingDiagnosisRelateToOneForUpdateInput {
  create: BillingDiagnosisCreateInput
  connect: BillingDiagnosisWhereUniqueInput
  disconnect: Boolean
}

input AppointmentBillingItemUpdateArgs {
  where: AppointmentBillingItemWhereUniqueInput!
  data: AppointmentBillingItemUpdateInput!
}

input AppointmentBillingItemCreateInput {
  diagnosisCode: String
  premiumCode: String
  units: Int
  billing: AppointmentBillingRelateToOneForCreateInput
  claim: BillingClaimRelateToOneForCreateInput
  diagnosis: BillingDiagnosisRelateToOneForCreateInput
}

input BillingClaimRelateToOneForCreateInput {
  create: BillingClaimCreateInput
  connect: BillingClaimWhereUniqueInput
}

input BillingDiagnosisRelateToOneForCreateInput {
  create: BillingDiagnosisCreateInput
  connect: BillingDiagnosisWhereUniqueInput
}

type AppointmentNote {
  id: ID!
  createdAt: DateTime
  appointment: Appointment
  patient: Patient
  summary: String
  title: String
}

input AppointmentNoteWhereUniqueInput {
  id: ID
}

input AppointmentNoteWhereInput {
  AND: [AppointmentNoteWhereInput!]
  OR: [AppointmentNoteWhereInput!]
  NOT: [AppointmentNoteWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  appointment: AppointmentWhereInput
  patient: PatientWhereInput
  summary: StringFilter
  title: StringFilter
}

input AppointmentNoteOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  summary: OrderDirection
  title: OrderDirection
}

input AppointmentNoteUpdateInput {
  createdAt: DateTime
  appointment: AppointmentRelateToOneForUpdateInput
  patient: PatientRelateToOneForUpdateInput
  summary: String
  title: String
}

input AppointmentNoteUpdateArgs {
  where: AppointmentNoteWhereUniqueInput!
  data: AppointmentNoteUpdateInput!
}

input AppointmentNoteCreateInput {
  createdAt: DateTime
  appointment: AppointmentRelateToOneForCreateInput
  patient: PatientRelateToOneForCreateInput
  summary: String
  title: String
}

type AppointmentRequest {
  id: ID!
  createdAt: DateTime
  reason: String
  doctor: Doctor
  event: CalendarEvent
  patient: Patient
}

input AppointmentRequestWhereUniqueInput {
  id: ID
}

input AppointmentRequestWhereInput {
  AND: [AppointmentRequestWhereInput!]
  OR: [AppointmentRequestWhereInput!]
  NOT: [AppointmentRequestWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  reason: StringFilter
  doctor: DoctorWhereInput
  event: CalendarEventWhereInput
  patient: PatientWhereInput
}

input AppointmentRequestOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  reason: OrderDirection
}

input AppointmentRequestUpdateInput {
  createdAt: DateTime
  reason: String
  doctor: DoctorRelateToOneForUpdateInput
  event: CalendarEventRelateToOneForUpdateInput
  patient: PatientRelateToOneForUpdateInput
}

input AppointmentRequestUpdateArgs {
  where: AppointmentRequestWhereUniqueInput!
  data: AppointmentRequestUpdateInput!
}

input AppointmentRequestCreateInput {
  createdAt: DateTime
  reason: String
  doctor: DoctorRelateToOneForCreateInput
  event: CalendarEventRelateToOneForCreateInput
  patient: PatientRelateToOneForCreateInput
}

type AppointmentVital {
  id: ID!
  appointment: Appointment
  bloodPressure: String
  cm: Int
  headCm: Int
  heartRate: Int
  kg: Int
  meters: Int
  oxygenSaturation: Int
  resp: Int
  temperature: Int
  patient: Patient
}

input AppointmentVitalWhereUniqueInput {
  id: ID
}

input AppointmentVitalWhereInput {
  AND: [AppointmentVitalWhereInput!]
  OR: [AppointmentVitalWhereInput!]
  NOT: [AppointmentVitalWhereInput!]
  id: IDFilter
  appointment: AppointmentWhereInput
  bloodPressure: StringFilter
  cm: IntNullableFilter
  headCm: IntNullableFilter
  heartRate: IntNullableFilter
  kg: IntNullableFilter
  meters: IntNullableFilter
  oxygenSaturation: IntNullableFilter
  resp: IntNullableFilter
  temperature: IntNullableFilter
  patient: PatientWhereInput
}

input AppointmentVitalOrderByInput {
  id: OrderDirection
  bloodPressure: OrderDirection
  cm: OrderDirection
  headCm: OrderDirection
  heartRate: OrderDirection
  kg: OrderDirection
  meters: OrderDirection
  oxygenSaturation: OrderDirection
  resp: OrderDirection
  temperature: OrderDirection
}

input AppointmentVitalUpdateInput {
  appointment: AppointmentRelateToOneForUpdateInput
  bloodPressure: String
  cm: Int
  headCm: Int
  heartRate: Int
  kg: Int
  meters: Int
  oxygenSaturation: Int
  resp: Int
  temperature: Int
  patient: PatientRelateToOneForUpdateInput
}

input AppointmentVitalUpdateArgs {
  where: AppointmentVitalWhereUniqueInput!
  data: AppointmentVitalUpdateInput!
}

input AppointmentVitalCreateInput {
  appointment: AppointmentRelateToOneForCreateInput
  bloodPressure: String
  cm: Int
  headCm: Int
  heartRate: Int
  kg: Int
  meters: Int
  oxygenSaturation: Int
  resp: Int
  temperature: Int
  patient: PatientRelateToOneForCreateInput
}

type BillingClaim {
  id: ID!
  amount: Int
  description: String
  feeCode: String
  appointmentBillingItems(
    where: AppointmentBillingItemWhereInput! = {}
    orderBy: [AppointmentBillingItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentBillingItem!]
  appointmentBillingItemsCount(
    where: AppointmentBillingItemWhereInput! = {}
  ): Int
}

input BillingClaimWhereUniqueInput {
  id: ID
}

input BillingClaimWhereInput {
  AND: [BillingClaimWhereInput!]
  OR: [BillingClaimWhereInput!]
  NOT: [BillingClaimWhereInput!]
  id: IDFilter
  amount: IntNullableFilter
  description: StringFilter
  feeCode: StringFilter
  appointmentBillingItems: AppointmentBillingItemManyRelationFilter
}

input BillingClaimOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  description: OrderDirection
  feeCode: OrderDirection
}

input BillingClaimUpdateInput {
  amount: Int
  description: String
  feeCode: String
  appointmentBillingItems: AppointmentBillingItemRelateToManyForUpdateInput
}

input BillingClaimUpdateArgs {
  where: BillingClaimWhereUniqueInput!
  data: BillingClaimUpdateInput!
}

input BillingClaimCreateInput {
  amount: Int
  description: String
  feeCode: String
  appointmentBillingItems: AppointmentBillingItemRelateToManyForCreateInput
}

type BillingDiagnosis {
  id: ID!
  code: String
  description: String
  appointmentBillingItems(
    where: AppointmentBillingItemWhereInput! = {}
    orderBy: [AppointmentBillingItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentBillingItem!]
  appointmentBillingItemsCount(
    where: AppointmentBillingItemWhereInput! = {}
  ): Int
}

input BillingDiagnosisWhereUniqueInput {
  id: ID
}

input BillingDiagnosisWhereInput {
  AND: [BillingDiagnosisWhereInput!]
  OR: [BillingDiagnosisWhereInput!]
  NOT: [BillingDiagnosisWhereInput!]
  id: IDFilter
  code: StringFilter
  description: StringFilter
  appointmentBillingItems: AppointmentBillingItemManyRelationFilter
}

input BillingDiagnosisOrderByInput {
  id: OrderDirection
  code: OrderDirection
  description: OrderDirection
}

input BillingDiagnosisUpdateInput {
  code: String
  description: String
  appointmentBillingItems: AppointmentBillingItemRelateToManyForUpdateInput
}

input BillingDiagnosisUpdateArgs {
  where: BillingDiagnosisWhereUniqueInput!
  data: BillingDiagnosisUpdateInput!
}

input BillingDiagnosisCreateInput {
  code: String
  description: String
  appointmentBillingItems: AppointmentBillingItemRelateToManyForCreateInput
}

type Booking {
  id: ID!
  durationMins: Int
  endsAt: DateTime
  isConfirmed: Boolean
  name: String
  startsAt: DateTime
  tzTarget: String
  appointment: Appointment
  calendar: Calendar
  doctor: Doctor
  event: CalendarEvent
  patient: Patient
}

input BookingWhereUniqueInput {
  id: ID
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: IDFilter
  durationMins: IntFilter
  endsAt: DateTimeNullableFilter
  isConfirmed: BooleanFilter
  name: StringFilter
  startsAt: DateTimeNullableFilter
  tzTarget: StringFilter
  appointment: AppointmentWhereInput
  calendar: CalendarWhereInput
  doctor: DoctorWhereInput
  event: CalendarEventWhereInput
  patient: PatientWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BookingOrderByInput {
  id: OrderDirection
  durationMins: OrderDirection
  endsAt: OrderDirection
  isConfirmed: OrderDirection
  name: OrderDirection
  startsAt: OrderDirection
  tzTarget: OrderDirection
}

input BookingUpdateInput {
  durationMins: Int
  endsAt: DateTime
  isConfirmed: Boolean
  name: String
  startsAt: DateTime
  tzTarget: String
  appointment: AppointmentRelateToOneForUpdateInput
  calendar: CalendarRelateToOneForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
  event: CalendarEventRelateToOneForUpdateInput
  patient: PatientRelateToOneForUpdateInput
}

input CalendarRelateToOneForUpdateInput {
  create: CalendarCreateInput
  connect: CalendarWhereUniqueInput
  disconnect: Boolean
}

input BookingUpdateArgs {
  where: BookingWhereUniqueInput!
  data: BookingUpdateInput!
}

input BookingCreateInput {
  durationMins: Int
  endsAt: DateTime
  isConfirmed: Boolean
  name: String
  startsAt: DateTime
  tzTarget: String
  appointment: AppointmentRelateToOneForCreateInput
  calendar: CalendarRelateToOneForCreateInput
  doctor: DoctorRelateToOneForCreateInput
  event: CalendarEventRelateToOneForCreateInput
  patient: PatientRelateToOneForCreateInput
}

input CalendarRelateToOneForCreateInput {
  create: CalendarCreateInput
  connect: CalendarWhereUniqueInput
}

type Calendar {
  id: ID!
  name: String
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  defaultSchedule: Schedule
  doctor: Doctor
  events(
    where: CalendarEventWhereInput! = {}
    orderBy: [CalendarEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CalendarEvent!]
  eventsCount(where: CalendarEventWhereInput! = {}): Int
  schedules(
    where: ScheduleWhereInput! = {}
    orderBy: [ScheduleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Schedule!]
  schedulesCount(where: ScheduleWhereInput! = {}): Int
}

input CalendarWhereUniqueInput {
  id: ID
}

input CalendarWhereInput {
  AND: [CalendarWhereInput!]
  OR: [CalendarWhereInput!]
  NOT: [CalendarWhereInput!]
  id: IDFilter
  name: StringFilter
  bookings: BookingManyRelationFilter
  defaultSchedule: ScheduleWhereInput
  doctor: DoctorWhereInput
  events: CalendarEventManyRelationFilter
  schedules: ScheduleManyRelationFilter
}

input BookingManyRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input CalendarEventManyRelationFilter {
  every: CalendarEventWhereInput
  some: CalendarEventWhereInput
  none: CalendarEventWhereInput
}

input ScheduleManyRelationFilter {
  every: ScheduleWhereInput
  some: ScheduleWhereInput
  none: ScheduleWhereInput
}

input CalendarOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CalendarUpdateInput {
  name: String
  bookings: BookingRelateToManyForUpdateInput
  defaultSchedule: ScheduleRelateToOneForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
  events: CalendarEventRelateToManyForUpdateInput
  schedules: ScheduleRelateToManyForUpdateInput
}

input BookingRelateToManyForUpdateInput {
  disconnect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input ScheduleRelateToOneForUpdateInput {
  create: ScheduleCreateInput
  connect: ScheduleWhereUniqueInput
  disconnect: Boolean
}

input CalendarEventRelateToManyForUpdateInput {
  disconnect: [CalendarEventWhereUniqueInput!]
  set: [CalendarEventWhereUniqueInput!]
  create: [CalendarEventCreateInput!]
  connect: [CalendarEventWhereUniqueInput!]
}

input ScheduleRelateToManyForUpdateInput {
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input CalendarUpdateArgs {
  where: CalendarWhereUniqueInput!
  data: CalendarUpdateInput!
}

input CalendarCreateInput {
  name: String
  bookings: BookingRelateToManyForCreateInput
  defaultSchedule: ScheduleRelateToOneForCreateInput
  doctor: DoctorRelateToOneForCreateInput
  events: CalendarEventRelateToManyForCreateInput
  schedules: ScheduleRelateToManyForCreateInput
}

input BookingRelateToManyForCreateInput {
  create: [BookingCreateInput!]
  connect: [BookingWhereUniqueInput!]
}

input ScheduleRelateToOneForCreateInput {
  create: ScheduleCreateInput
  connect: ScheduleWhereUniqueInput
}

input CalendarEventRelateToManyForCreateInput {
  create: [CalendarEventCreateInput!]
  connect: [CalendarEventWhereUniqueInput!]
}

input ScheduleRelateToManyForCreateInput {
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

type CalendarEvent {
  id: ID!
  companyName: String
  description: String
  durationMins: Int
  facilityMasterNumber: String
  isActive: Boolean
  isConfirmationRequired: Boolean
  serviceLocationIndicator: String
  title: String
  address: Address
  appointmentRequests: AppointmentRequest
  appointments(
    where: AppointmentWhereInput! = {}
    orderBy: [AppointmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Appointment!]
  appointmentsCount(where: AppointmentWhereInput! = {}): Int
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  calendar: Calendar
  doctor: Doctor
  eventType: CalendarEventType
}

input CalendarEventWhereUniqueInput {
  id: ID
}

input CalendarEventWhereInput {
  AND: [CalendarEventWhereInput!]
  OR: [CalendarEventWhereInput!]
  NOT: [CalendarEventWhereInput!]
  id: IDFilter
  companyName: StringFilter
  description: StringFilter
  durationMins: IntFilter
  facilityMasterNumber: StringFilter
  isActive: BooleanFilter
  isConfirmationRequired: BooleanFilter
  serviceLocationIndicator: StringFilter
  title: StringFilter
  address: AddressWhereInput
  appointmentRequests: AppointmentRequestWhereInput
  appointments: AppointmentManyRelationFilter
  bookings: BookingManyRelationFilter
  calendar: CalendarWhereInput
  doctor: DoctorWhereInput
  eventType: CalendarEventTypeWhereInput
}

input AppointmentManyRelationFilter {
  every: AppointmentWhereInput
  some: AppointmentWhereInput
  none: AppointmentWhereInput
}

input CalendarEventOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
  description: OrderDirection
  durationMins: OrderDirection
  facilityMasterNumber: OrderDirection
  isActive: OrderDirection
  isConfirmationRequired: OrderDirection
  serviceLocationIndicator: OrderDirection
  title: OrderDirection
}

input CalendarEventUpdateInput {
  companyName: String
  description: String
  durationMins: Int
  facilityMasterNumber: String
  isActive: Boolean
  isConfirmationRequired: Boolean
  serviceLocationIndicator: String
  title: String
  address: AddressRelateToOneForUpdateInput
  appointmentRequests: AppointmentRequestRelateToOneForUpdateInput
  appointments: AppointmentRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  calendar: CalendarRelateToOneForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
  eventType: CalendarEventTypeRelateToOneForUpdateInput
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input AppointmentRequestRelateToOneForUpdateInput {
  create: AppointmentRequestCreateInput
  connect: AppointmentRequestWhereUniqueInput
  disconnect: Boolean
}

input AppointmentRelateToManyForUpdateInput {
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input CalendarEventTypeRelateToOneForUpdateInput {
  create: CalendarEventTypeCreateInput
  connect: CalendarEventTypeWhereUniqueInput
  disconnect: Boolean
}

input CalendarEventUpdateArgs {
  where: CalendarEventWhereUniqueInput!
  data: CalendarEventUpdateInput!
}

input CalendarEventCreateInput {
  companyName: String
  description: String
  durationMins: Int
  facilityMasterNumber: String
  isActive: Boolean
  isConfirmationRequired: Boolean
  serviceLocationIndicator: String
  title: String
  address: AddressRelateToOneForCreateInput
  appointmentRequests: AppointmentRequestRelateToOneForCreateInput
  appointments: AppointmentRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  calendar: CalendarRelateToOneForCreateInput
  doctor: DoctorRelateToOneForCreateInput
  eventType: CalendarEventTypeRelateToOneForCreateInput
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input AppointmentRequestRelateToOneForCreateInput {
  create: AppointmentRequestCreateInput
  connect: AppointmentRequestWhereUniqueInput
}

input AppointmentRelateToManyForCreateInput {
  create: [AppointmentCreateInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input CalendarEventTypeRelateToOneForCreateInput {
  create: CalendarEventTypeCreateInput
  connect: CalendarEventTypeWhereUniqueInput
}

type CalendarEventType {
  id: ID!
  label: String
  value: String
  events(
    where: CalendarEventWhereInput! = {}
    orderBy: [CalendarEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CalendarEvent!]
  eventsCount(where: CalendarEventWhereInput! = {}): Int
}

input CalendarEventTypeWhereUniqueInput {
  id: ID
  value: String
}

input CalendarEventTypeWhereInput {
  AND: [CalendarEventTypeWhereInput!]
  OR: [CalendarEventTypeWhereInput!]
  NOT: [CalendarEventTypeWhereInput!]
  id: IDFilter
  label: StringFilter
  value: StringFilter
  events: CalendarEventManyRelationFilter
}

input CalendarEventTypeOrderByInput {
  id: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input CalendarEventTypeUpdateInput {
  label: String
  value: String
  events: CalendarEventRelateToManyForUpdateInput
}

input CalendarEventTypeUpdateArgs {
  where: CalendarEventTypeWhereUniqueInput!
  data: CalendarEventTypeUpdateInput!
}

input CalendarEventTypeCreateInput {
  label: String
  value: String
  events: CalendarEventRelateToManyForCreateInput
}

type Company {
  id: ID!
  name: String
  slug: String
  locations(
    where: CompanyLocationWhereInput! = {}
    orderBy: [CompanyLocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CompanyLocation!]
  locationsCount(where: CompanyLocationWhereInput! = {}): Int
}

input CompanyWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  locations: CompanyLocationManyRelationFilter
}

input CompanyLocationManyRelationFilter {
  every: CompanyLocationWhereInput
  some: CompanyLocationWhereInput
  none: CompanyLocationWhereInput
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input CompanyUpdateInput {
  name: String
  slug: String
  locations: CompanyLocationRelateToManyForUpdateInput
}

input CompanyLocationRelateToManyForUpdateInput {
  disconnect: [CompanyLocationWhereUniqueInput!]
  set: [CompanyLocationWhereUniqueInput!]
  create: [CompanyLocationCreateInput!]
  connect: [CompanyLocationWhereUniqueInput!]
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
  slug: String
  locations: CompanyLocationRelateToManyForCreateInput
}

input CompanyLocationRelateToManyForCreateInput {
  create: [CompanyLocationCreateInput!]
  connect: [CompanyLocationWhereUniqueInput!]
}

type CompanyLocation {
  id: ID!
  facilityMasterNumber: String
  locationType: String
  name: String
  serviceLocationIndicator: String
  slug: String
  company: Company
}

input CompanyLocationWhereUniqueInput {
  id: ID
  facilityMasterNumber: String
  serviceLocationIndicator: String
}

input CompanyLocationWhereInput {
  AND: [CompanyLocationWhereInput!]
  OR: [CompanyLocationWhereInput!]
  NOT: [CompanyLocationWhereInput!]
  id: IDFilter
  facilityMasterNumber: StringFilter
  locationType: StringFilter
  name: StringFilter
  serviceLocationIndicator: StringFilter
  slug: StringFilter
  company: CompanyWhereInput
}

input CompanyLocationOrderByInput {
  id: OrderDirection
  facilityMasterNumber: OrderDirection
  locationType: OrderDirection
  name: OrderDirection
  serviceLocationIndicator: OrderDirection
  slug: OrderDirection
}

input CompanyLocationUpdateInput {
  facilityMasterNumber: String
  locationType: String
  name: String
  serviceLocationIndicator: String
  slug: String
  company: CompanyRelateToOneForUpdateInput
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input CompanyLocationUpdateArgs {
  where: CompanyLocationWhereUniqueInput!
  data: CompanyLocationUpdateInput!
}

input CompanyLocationCreateInput {
  facilityMasterNumber: String
  locationType: String
  name: String
  serviceLocationIndicator: String
  slug: String
  company: CompanyRelateToOneForCreateInput
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

type Contract {
  id: ID!
  body: Contract_body_Document
  effectiveFrom: DateTime
  isActive: Boolean
  lastUpdated: DateTime
  name: String
  slug: String
  signedBy(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  signedByCount(where: UserWhereInput! = {}): Int
}

type Contract_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ContractWhereUniqueInput {
  id: ID
  slug: String
}

input ContractWhereInput {
  AND: [ContractWhereInput!]
  OR: [ContractWhereInput!]
  NOT: [ContractWhereInput!]
  id: IDFilter
  effectiveFrom: DateTimeNullableFilter
  isActive: BooleanFilter
  lastUpdated: DateTimeNullableFilter
  name: StringFilter
  slug: StringFilter
  signedBy: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ContractOrderByInput {
  id: OrderDirection
  effectiveFrom: OrderDirection
  isActive: OrderDirection
  lastUpdated: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input ContractUpdateInput {
  body: JSON
  effectiveFrom: DateTime
  isActive: Boolean
  lastUpdated: DateTime
  name: String
  slug: String
  signedBy: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ContractUpdateArgs {
  where: ContractWhereUniqueInput!
  data: ContractUpdateInput!
}

input ContractCreateInput {
  body: JSON
  effectiveFrom: DateTime
  isActive: Boolean
  lastUpdated: DateTime
  name: String
  slug: String
  signedBy: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Country {
  id: ID!
  administrativeAreas(
    where: AdministrativeAreaWhereInput! = {}
    orderBy: [AdministrativeAreaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AdministrativeArea!]
  administrativeAreasCount(where: AdministrativeAreaWhereInput! = {}): Int
  isActive: Boolean
  label: String
  value: String
}

input CountryWhereUniqueInput {
  id: ID
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  administrativeAreas: AdministrativeAreaManyRelationFilter
  isActive: BooleanFilter
  label: StringFilter
  value: StringFilter
}

input AdministrativeAreaManyRelationFilter {
  every: AdministrativeAreaWhereInput
  some: AdministrativeAreaWhereInput
  none: AdministrativeAreaWhereInput
}

input CountryOrderByInput {
  id: OrderDirection
  isActive: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input CountryUpdateInput {
  administrativeAreas: AdministrativeAreaRelateToManyForUpdateInput
  isActive: Boolean
  label: String
  value: String
}

input AdministrativeAreaRelateToManyForUpdateInput {
  disconnect: [AdministrativeAreaWhereUniqueInput!]
  set: [AdministrativeAreaWhereUniqueInput!]
  create: [AdministrativeAreaCreateInput!]
  connect: [AdministrativeAreaWhereUniqueInput!]
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  administrativeAreas: AdministrativeAreaRelateToManyForCreateInput
  isActive: Boolean
  label: String
  value: String
}

input AdministrativeAreaRelateToManyForCreateInput {
  create: [AdministrativeAreaCreateInput!]
  connect: [AdministrativeAreaWhereUniqueInput!]
}

type Doctor {
  id: ID!
  clinicFMN: String
  clinicFaxNumber: String
  clinicName: String
  clinicOHIPBillingCode: String
  clinicPhoneNumber: String
  clinicSLI: String
  contractSignedOn: DateTime
  doctorSince: DateTime
  email: String
  isCompleteProfile: Boolean
  isVerified: Boolean
  licenseNumber: String
  licenseProvider: String
  medicalLiabilityNumber: String
  medicalLiabilityProvider: String
  province: String
  summary: String
  appointmentRequests(
    where: AppointmentRequestWhereInput! = {}
    orderBy: [AppointmentRequestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentRequest!]
  appointmentRequestsCount(where: AppointmentRequestWhereInput! = {}): Int
  appointments(
    where: AppointmentWhereInput! = {}
    orderBy: [AppointmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Appointment!]
  appointmentsCount(where: AppointmentWhereInput! = {}): Int
  billings(
    where: AppointmentBillingWhereInput! = {}
    orderBy: [AppointmentBillingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentBilling!]
  billingsCount(where: AppointmentBillingWhereInput! = {}): Int
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  calendar: Calendar
  calendarEvents(
    where: CalendarEventWhereInput! = {}
    orderBy: [CalendarEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CalendarEvent!]
  calendarEventsCount(where: CalendarEventWhereInput! = {}): Int
  caringForPatients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  caringForPatientsCount(where: PatientWhereInput! = {}): Int
  doctorSpecialty: DoctorSpecialty
  doctorSubSpecialties(
    where: DoctorSubSpecialtyWhereInput! = {}
    orderBy: [DoctorSubSpecialtyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DoctorSubSpecialty!]
  doctorSubSpecialtiesCount(where: DoctorSubSpecialtyWhereInput! = {}): Int
  forms(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formsCount(where: FormWhereInput! = {}): Int
  languages(
    where: LanguageWhereInput! = {}
    orderBy: [LanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Language!]
  languagesCount(where: LanguageWhereInput! = {}): Int
  patients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  patientsCount(where: PatientWhereInput! = {}): Int
  prescriptions(
    where: PrescriptionWhereInput! = {}
    orderBy: [PrescriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prescription!]
  prescriptionsCount(where: PrescriptionWhereInput! = {}): Int
  proofOfIdentification: ProofOfIdentification
  proofOfInsurance: ProofOfInsurance
  proofOfLicense: ProofOfLicense
  savedByPatients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  savedByPatientsCount(where: PatientWhereInput! = {}): Int
  user: User
}

input DoctorWhereUniqueInput {
  id: ID
}

input DoctorWhereInput {
  AND: [DoctorWhereInput!]
  OR: [DoctorWhereInput!]
  NOT: [DoctorWhereInput!]
  id: IDFilter
  clinicFMN: StringFilter
  clinicFaxNumber: StringFilter
  clinicName: StringFilter
  clinicOHIPBillingCode: StringFilter
  clinicPhoneNumber: StringFilter
  clinicSLI: StringFilter
  contractSignedOn: DateTimeNullableFilter
  doctorSince: DateTimeNullableFilter
  email: StringFilter
  isCompleteProfile: BooleanFilter
  isVerified: BooleanFilter
  licenseNumber: StringFilter
  licenseProvider: StringFilter
  medicalLiabilityNumber: StringFilter
  medicalLiabilityProvider: StringFilter
  province: StringFilter
  summary: StringFilter
  appointmentRequests: AppointmentRequestManyRelationFilter
  appointments: AppointmentManyRelationFilter
  billings: AppointmentBillingManyRelationFilter
  bookings: BookingManyRelationFilter
  calendar: CalendarWhereInput
  calendarEvents: CalendarEventManyRelationFilter
  caringForPatients: PatientManyRelationFilter
  doctorSpecialty: DoctorSpecialtyWhereInput
  doctorSubSpecialties: DoctorSubSpecialtyManyRelationFilter
  forms: FormManyRelationFilter
  languages: LanguageManyRelationFilter
  patients: PatientManyRelationFilter
  prescriptions: PrescriptionManyRelationFilter
  proofOfIdentification: ProofOfIdentificationWhereInput
  proofOfInsurance: ProofOfInsuranceWhereInput
  proofOfLicense: ProofOfLicenseWhereInput
  savedByPatients: PatientManyRelationFilter
  user: UserWhereInput
}

input AppointmentRequestManyRelationFilter {
  every: AppointmentRequestWhereInput
  some: AppointmentRequestWhereInput
  none: AppointmentRequestWhereInput
}

input AppointmentBillingManyRelationFilter {
  every: AppointmentBillingWhereInput
  some: AppointmentBillingWhereInput
  none: AppointmentBillingWhereInput
}

input PatientManyRelationFilter {
  every: PatientWhereInput
  some: PatientWhereInput
  none: PatientWhereInput
}

input DoctorSubSpecialtyManyRelationFilter {
  every: DoctorSubSpecialtyWhereInput
  some: DoctorSubSpecialtyWhereInput
  none: DoctorSubSpecialtyWhereInput
}

input LanguageManyRelationFilter {
  every: LanguageWhereInput
  some: LanguageWhereInput
  none: LanguageWhereInput
}

input PrescriptionManyRelationFilter {
  every: PrescriptionWhereInput
  some: PrescriptionWhereInput
  none: PrescriptionWhereInput
}

input DoctorOrderByInput {
  id: OrderDirection
  clinicFMN: OrderDirection
  clinicFaxNumber: OrderDirection
  clinicName: OrderDirection
  clinicOHIPBillingCode: OrderDirection
  clinicPhoneNumber: OrderDirection
  clinicSLI: OrderDirection
  contractSignedOn: OrderDirection
  doctorSince: OrderDirection
  email: OrderDirection
  isCompleteProfile: OrderDirection
  isVerified: OrderDirection
  licenseNumber: OrderDirection
  licenseProvider: OrderDirection
  medicalLiabilityNumber: OrderDirection
  medicalLiabilityProvider: OrderDirection
  province: OrderDirection
  summary: OrderDirection
}

input DoctorUpdateInput {
  clinicFMN: String
  clinicFaxNumber: String
  clinicName: String
  clinicOHIPBillingCode: String
  clinicPhoneNumber: String
  clinicSLI: String
  contractSignedOn: DateTime
  doctorSince: DateTime
  email: String
  isCompleteProfile: Boolean
  isVerified: Boolean
  licenseNumber: String
  licenseProvider: String
  medicalLiabilityNumber: String
  medicalLiabilityProvider: String
  province: String
  summary: String
  appointmentRequests: AppointmentRequestRelateToManyForUpdateInput
  appointments: AppointmentRelateToManyForUpdateInput
  billings: AppointmentBillingRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  calendar: CalendarRelateToOneForUpdateInput
  calendarEvents: CalendarEventRelateToManyForUpdateInput
  caringForPatients: PatientRelateToManyForUpdateInput
  doctorSpecialty: DoctorSpecialtyRelateToOneForUpdateInput
  doctorSubSpecialties: DoctorSubSpecialtyRelateToManyForUpdateInput
  forms: FormRelateToManyForUpdateInput
  languages: LanguageRelateToManyForUpdateInput
  patients: PatientRelateToManyForUpdateInput
  prescriptions: PrescriptionRelateToManyForUpdateInput
  proofOfIdentification: ProofOfIdentificationRelateToOneForUpdateInput
  proofOfInsurance: ProofOfInsuranceRelateToOneForUpdateInput
  proofOfLicense: ProofOfLicenseRelateToOneForUpdateInput
  savedByPatients: PatientRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input AppointmentRequestRelateToManyForUpdateInput {
  disconnect: [AppointmentRequestWhereUniqueInput!]
  set: [AppointmentRequestWhereUniqueInput!]
  create: [AppointmentRequestCreateInput!]
  connect: [AppointmentRequestWhereUniqueInput!]
}

input AppointmentBillingRelateToManyForUpdateInput {
  disconnect: [AppointmentBillingWhereUniqueInput!]
  set: [AppointmentBillingWhereUniqueInput!]
  create: [AppointmentBillingCreateInput!]
  connect: [AppointmentBillingWhereUniqueInput!]
}

input PatientRelateToManyForUpdateInput {
  disconnect: [PatientWhereUniqueInput!]
  set: [PatientWhereUniqueInput!]
  create: [PatientCreateInput!]
  connect: [PatientWhereUniqueInput!]
}

input DoctorSpecialtyRelateToOneForUpdateInput {
  create: DoctorSpecialtyCreateInput
  connect: DoctorSpecialtyWhereUniqueInput
  disconnect: Boolean
}

input DoctorSubSpecialtyRelateToManyForUpdateInput {
  disconnect: [DoctorSubSpecialtyWhereUniqueInput!]
  set: [DoctorSubSpecialtyWhereUniqueInput!]
  create: [DoctorSubSpecialtyCreateInput!]
  connect: [DoctorSubSpecialtyWhereUniqueInput!]
}

input LanguageRelateToManyForUpdateInput {
  disconnect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input PrescriptionRelateToManyForUpdateInput {
  disconnect: [PrescriptionWhereUniqueInput!]
  set: [PrescriptionWhereUniqueInput!]
  create: [PrescriptionCreateInput!]
  connect: [PrescriptionWhereUniqueInput!]
}

input ProofOfIdentificationRelateToOneForUpdateInput {
  create: ProofOfIdentificationCreateInput
  connect: ProofOfIdentificationWhereUniqueInput
  disconnect: Boolean
}

input ProofOfInsuranceRelateToOneForUpdateInput {
  create: ProofOfInsuranceCreateInput
  connect: ProofOfInsuranceWhereUniqueInput
  disconnect: Boolean
}

input ProofOfLicenseRelateToOneForUpdateInput {
  create: ProofOfLicenseCreateInput
  connect: ProofOfLicenseWhereUniqueInput
  disconnect: Boolean
}

input DoctorUpdateArgs {
  where: DoctorWhereUniqueInput!
  data: DoctorUpdateInput!
}

input DoctorCreateInput {
  clinicFMN: String
  clinicFaxNumber: String
  clinicName: String
  clinicOHIPBillingCode: String
  clinicPhoneNumber: String
  clinicSLI: String
  contractSignedOn: DateTime
  doctorSince: DateTime
  email: String
  isCompleteProfile: Boolean
  isVerified: Boolean
  licenseNumber: String
  licenseProvider: String
  medicalLiabilityNumber: String
  medicalLiabilityProvider: String
  province: String
  summary: String
  appointmentRequests: AppointmentRequestRelateToManyForCreateInput
  appointments: AppointmentRelateToManyForCreateInput
  billings: AppointmentBillingRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  calendar: CalendarRelateToOneForCreateInput
  calendarEvents: CalendarEventRelateToManyForCreateInput
  caringForPatients: PatientRelateToManyForCreateInput
  doctorSpecialty: DoctorSpecialtyRelateToOneForCreateInput
  doctorSubSpecialties: DoctorSubSpecialtyRelateToManyForCreateInput
  forms: FormRelateToManyForCreateInput
  languages: LanguageRelateToManyForCreateInput
  patients: PatientRelateToManyForCreateInput
  prescriptions: PrescriptionRelateToManyForCreateInput
  proofOfIdentification: ProofOfIdentificationRelateToOneForCreateInput
  proofOfInsurance: ProofOfInsuranceRelateToOneForCreateInput
  proofOfLicense: ProofOfLicenseRelateToOneForCreateInput
  savedByPatients: PatientRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

input AppointmentRequestRelateToManyForCreateInput {
  create: [AppointmentRequestCreateInput!]
  connect: [AppointmentRequestWhereUniqueInput!]
}

input AppointmentBillingRelateToManyForCreateInput {
  create: [AppointmentBillingCreateInput!]
  connect: [AppointmentBillingWhereUniqueInput!]
}

input PatientRelateToManyForCreateInput {
  create: [PatientCreateInput!]
  connect: [PatientWhereUniqueInput!]
}

input DoctorSpecialtyRelateToOneForCreateInput {
  create: DoctorSpecialtyCreateInput
  connect: DoctorSpecialtyWhereUniqueInput
}

input DoctorSubSpecialtyRelateToManyForCreateInput {
  create: [DoctorSubSpecialtyCreateInput!]
  connect: [DoctorSubSpecialtyWhereUniqueInput!]
}

input LanguageRelateToManyForCreateInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input PrescriptionRelateToManyForCreateInput {
  create: [PrescriptionCreateInput!]
  connect: [PrescriptionWhereUniqueInput!]
}

input ProofOfIdentificationRelateToOneForCreateInput {
  create: ProofOfIdentificationCreateInput
  connect: ProofOfIdentificationWhereUniqueInput
}

input ProofOfInsuranceRelateToOneForCreateInput {
  create: ProofOfInsuranceCreateInput
  connect: ProofOfInsuranceWhereUniqueInput
}

input ProofOfLicenseRelateToOneForCreateInput {
  create: ProofOfLicenseCreateInput
  connect: ProofOfLicenseWhereUniqueInput
}

type DoctorSpecialty {
  id: ID!
  label: String
  value: String
  doctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  doctorsCount(where: DoctorWhereInput! = {}): Int
}

input DoctorSpecialtyWhereUniqueInput {
  id: ID
  value: String
}

input DoctorSpecialtyWhereInput {
  AND: [DoctorSpecialtyWhereInput!]
  OR: [DoctorSpecialtyWhereInput!]
  NOT: [DoctorSpecialtyWhereInput!]
  id: IDFilter
  label: StringFilter
  value: StringFilter
  doctors: DoctorManyRelationFilter
}

input DoctorManyRelationFilter {
  every: DoctorWhereInput
  some: DoctorWhereInput
  none: DoctorWhereInput
}

input DoctorSpecialtyOrderByInput {
  id: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input DoctorSpecialtyUpdateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForUpdateInput
}

input DoctorRelateToManyForUpdateInput {
  disconnect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
  create: [DoctorCreateInput!]
  connect: [DoctorWhereUniqueInput!]
}

input DoctorSpecialtyUpdateArgs {
  where: DoctorSpecialtyWhereUniqueInput!
  data: DoctorSpecialtyUpdateInput!
}

input DoctorSpecialtyCreateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForCreateInput
}

input DoctorRelateToManyForCreateInput {
  create: [DoctorCreateInput!]
  connect: [DoctorWhereUniqueInput!]
}

type DoctorSubSpecialty {
  id: ID!
  label: String
  value: String
  doctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  doctorsCount(where: DoctorWhereInput! = {}): Int
}

input DoctorSubSpecialtyWhereUniqueInput {
  id: ID
  value: String
}

input DoctorSubSpecialtyWhereInput {
  AND: [DoctorSubSpecialtyWhereInput!]
  OR: [DoctorSubSpecialtyWhereInput!]
  NOT: [DoctorSubSpecialtyWhereInput!]
  id: IDFilter
  label: StringFilter
  value: StringFilter
  doctors: DoctorManyRelationFilter
}

input DoctorSubSpecialtyOrderByInput {
  id: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input DoctorSubSpecialtyUpdateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForUpdateInput
}

input DoctorSubSpecialtyUpdateArgs {
  where: DoctorSubSpecialtyWhereUniqueInput!
  data: DoctorSubSpecialtyUpdateInput!
}

input DoctorSubSpecialtyCreateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForCreateInput
}

type EmergencyContact {
  id: ID!
  cellPhoneNumberString: String
  email: String
  firstName: String
  homePhoneNumberString: String
  lastName: String
  relation: String
  patient: Patient
}

input EmergencyContactWhereUniqueInput {
  id: ID
}

input EmergencyContactWhereInput {
  AND: [EmergencyContactWhereInput!]
  OR: [EmergencyContactWhereInput!]
  NOT: [EmergencyContactWhereInput!]
  id: IDFilter
  cellPhoneNumberString: StringFilter
  email: StringFilter
  firstName: StringFilter
  homePhoneNumberString: StringFilter
  lastName: StringFilter
  relation: StringFilter
  patient: PatientWhereInput
}

input EmergencyContactOrderByInput {
  id: OrderDirection
  cellPhoneNumberString: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  homePhoneNumberString: OrderDirection
  lastName: OrderDirection
  relation: OrderDirection
}

input EmergencyContactUpdateInput {
  cellPhoneNumberString: String
  email: String
  firstName: String
  homePhoneNumberString: String
  lastName: String
  relation: String
  patient: PatientRelateToOneForUpdateInput
}

input EmergencyContactUpdateArgs {
  where: EmergencyContactWhereUniqueInput!
  data: EmergencyContactUpdateInput!
}

input EmergencyContactCreateInput {
  cellPhoneNumberString: String
  email: String
  firstName: String
  homePhoneNumberString: String
  lastName: String
  relation: String
  patient: PatientRelateToOneForCreateInput
}

type Form {
  id: ID!
  name: String
  slug: String
  appointment: Appointment
  doctor: Doctor
  formType: FormType
  patient: Patient
}

input FormWhereUniqueInput {
  id: ID
}

input FormWhereInput {
  AND: [FormWhereInput!]
  OR: [FormWhereInput!]
  NOT: [FormWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  appointment: AppointmentWhereInput
  doctor: DoctorWhereInput
  formType: FormTypeWhereInput
  patient: PatientWhereInput
}

input FormOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input FormUpdateInput {
  name: String
  slug: String
  appointment: AppointmentRelateToOneForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
  formType: FormTypeRelateToOneForUpdateInput
  patient: PatientRelateToOneForUpdateInput
}

input FormTypeRelateToOneForUpdateInput {
  create: FormTypeCreateInput
  connect: FormTypeWhereUniqueInput
  disconnect: Boolean
}

input FormUpdateArgs {
  where: FormWhereUniqueInput!
  data: FormUpdateInput!
}

input FormCreateInput {
  name: String
  slug: String
  appointment: AppointmentRelateToOneForCreateInput
  doctor: DoctorRelateToOneForCreateInput
  formType: FormTypeRelateToOneForCreateInput
  patient: PatientRelateToOneForCreateInput
}

input FormTypeRelateToOneForCreateInput {
  create: FormTypeCreateInput
  connect: FormTypeWhereUniqueInput
}

type FormType {
  id: ID!
  name: String
  slug: String
  forms(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formsCount(where: FormWhereInput! = {}): Int
}

input FormTypeWhereUniqueInput {
  id: ID
}

input FormTypeWhereInput {
  AND: [FormTypeWhereInput!]
  OR: [FormTypeWhereInput!]
  NOT: [FormTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  forms: FormManyRelationFilter
}

input FormTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input FormTypeUpdateInput {
  name: String
  slug: String
  forms: FormRelateToManyForUpdateInput
}

input FormTypeUpdateArgs {
  where: FormTypeWhereUniqueInput!
  data: FormTypeUpdateInput!
}

input FormTypeCreateInput {
  name: String
  slug: String
  forms: FormRelateToManyForCreateInput
}

type HealthCard {
  id: ID!
  dateOfBirth: DateTime
  expiryDate: DateTime
  insurancePolicyNumber: String
  insuranceProvider: String
  nameOnCard: String
  versionCode: String
  patient: Patient
  userInvite: UserInvite
}

input HealthCardWhereUniqueInput {
  id: ID
}

input HealthCardWhereInput {
  AND: [HealthCardWhereInput!]
  OR: [HealthCardWhereInput!]
  NOT: [HealthCardWhereInput!]
  id: IDFilter
  dateOfBirth: DateTimeFilter
  expiryDate: DateTimeFilter
  insurancePolicyNumber: StringFilter
  insuranceProvider: StringFilter
  nameOnCard: StringFilter
  versionCode: StringFilter
  patient: PatientWhereInput
  userInvite: UserInviteWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input HealthCardOrderByInput {
  id: OrderDirection
  dateOfBirth: OrderDirection
  expiryDate: OrderDirection
  insurancePolicyNumber: OrderDirection
  insuranceProvider: OrderDirection
  nameOnCard: OrderDirection
  versionCode: OrderDirection
}

input HealthCardUpdateInput {
  dateOfBirth: DateTime
  expiryDate: DateTime
  insurancePolicyNumber: String
  insuranceProvider: String
  nameOnCard: String
  versionCode: String
  patient: PatientRelateToOneForUpdateInput
  userInvite: UserInviteRelateToOneForUpdateInput
}

input UserInviteRelateToOneForUpdateInput {
  create: UserInviteCreateInput
  connect: UserInviteWhereUniqueInput
  disconnect: Boolean
}

input HealthCardUpdateArgs {
  where: HealthCardWhereUniqueInput!
  data: HealthCardUpdateInput!
}

input HealthCardCreateInput {
  dateOfBirth: DateTime
  expiryDate: DateTime
  insurancePolicyNumber: String
  insuranceProvider: String
  nameOnCard: String
  versionCode: String
  patient: PatientRelateToOneForCreateInput
  userInvite: UserInviteRelateToOneForCreateInput
}

input UserInviteRelateToOneForCreateInput {
  create: UserInviteCreateInput
  connect: UserInviteWhereUniqueInput
}

type Language {
  id: ID!
  label: String
  value: String
  doctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  doctorsCount(where: DoctorWhereInput! = {}): Int
}

input LanguageWhereUniqueInput {
  id: ID
  value: String
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: IDFilter
  label: StringFilter
  value: StringFilter
  doctors: DoctorManyRelationFilter
}

input LanguageOrderByInput {
  id: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input LanguageUpdateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForUpdateInput
}

input LanguageUpdateArgs {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateInput!
}

input LanguageCreateInput {
  label: String
  value: String
  doctors: DoctorRelateToManyForCreateInput
}

type Medication {
  id: ID!
  brandName: String
  drugCode: String
  drugIdentificationNumber: String
  activeIngredients(
    where: ActiveIngredientWhereInput! = {}
    orderBy: [ActiveIngredientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ActiveIngredient!]
  activeIngredientsCount(where: ActiveIngredientWhereInput! = {}): Int
  prescriptionItems(
    where: PrescriptionItemWhereInput! = {}
    orderBy: [PrescriptionItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PrescriptionItem!]
  prescriptionItemsCount(where: PrescriptionItemWhereInput! = {}): Int
}

input MedicationWhereUniqueInput {
  id: ID
  drugCode: String
  drugIdentificationNumber: String
}

input MedicationWhereInput {
  AND: [MedicationWhereInput!]
  OR: [MedicationWhereInput!]
  NOT: [MedicationWhereInput!]
  id: IDFilter
  brandName: StringFilter
  drugCode: StringFilter
  drugIdentificationNumber: StringFilter
  activeIngredients: ActiveIngredientManyRelationFilter
  prescriptionItems: PrescriptionItemManyRelationFilter
}

input ActiveIngredientManyRelationFilter {
  every: ActiveIngredientWhereInput
  some: ActiveIngredientWhereInput
  none: ActiveIngredientWhereInput
}

input PrescriptionItemManyRelationFilter {
  every: PrescriptionItemWhereInput
  some: PrescriptionItemWhereInput
  none: PrescriptionItemWhereInput
}

input MedicationOrderByInput {
  id: OrderDirection
  brandName: OrderDirection
  drugCode: OrderDirection
  drugIdentificationNumber: OrderDirection
}

input MedicationUpdateInput {
  brandName: String
  drugCode: String
  drugIdentificationNumber: String
  activeIngredients: ActiveIngredientRelateToManyForUpdateInput
  prescriptionItems: PrescriptionItemRelateToManyForUpdateInput
}

input ActiveIngredientRelateToManyForUpdateInput {
  disconnect: [ActiveIngredientWhereUniqueInput!]
  set: [ActiveIngredientWhereUniqueInput!]
  create: [ActiveIngredientCreateInput!]
  connect: [ActiveIngredientWhereUniqueInput!]
}

input PrescriptionItemRelateToManyForUpdateInput {
  disconnect: [PrescriptionItemWhereUniqueInput!]
  set: [PrescriptionItemWhereUniqueInput!]
  create: [PrescriptionItemCreateInput!]
  connect: [PrescriptionItemWhereUniqueInput!]
}

input MedicationUpdateArgs {
  where: MedicationWhereUniqueInput!
  data: MedicationUpdateInput!
}

input MedicationCreateInput {
  brandName: String
  drugCode: String
  drugIdentificationNumber: String
  activeIngredients: ActiveIngredientRelateToManyForCreateInput
  prescriptionItems: PrescriptionItemRelateToManyForCreateInput
}

input ActiveIngredientRelateToManyForCreateInput {
  create: [ActiveIngredientCreateInput!]
  connect: [ActiveIngredientWhereUniqueInput!]
}

input PrescriptionItemRelateToManyForCreateInput {
  create: [PrescriptionItemCreateInput!]
  connect: [PrescriptionItemWhereUniqueInput!]
}

type Patient {
  id: ID!
  isCompleteProfile: Boolean
  name: String
  appointmentNotes(
    where: AppointmentNoteWhereInput! = {}
    orderBy: [AppointmentNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentNote!]
  appointmentNotesCount(where: AppointmentNoteWhereInput! = {}): Int
  appointmentRequests(
    where: AppointmentRequestWhereInput! = {}
    orderBy: [AppointmentRequestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentRequest!]
  appointmentRequestsCount(where: AppointmentRequestWhereInput! = {}): Int
  appointmentVitals(
    where: AppointmentVitalWhereInput! = {}
    orderBy: [AppointmentVitalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentVital!]
  appointmentVitalsCount(where: AppointmentVitalWhereInput! = {}): Int
  appointments(
    where: AppointmentWhereInput! = {}
    orderBy: [AppointmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Appointment!]
  appointmentsCount(where: AppointmentWhereInput! = {}): Int
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  bookingsCount(where: BookingWhereInput! = {}): Int
  caredByDoctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  caredByDoctorsCount(where: DoctorWhereInput! = {}): Int
  emergencyContacts(
    where: EmergencyContactWhereInput! = {}
    orderBy: [EmergencyContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmergencyContact!]
  emergencyContactsCount(where: EmergencyContactWhereInput! = {}): Int
  forms(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formsCount(where: FormWhereInput! = {}): Int
  healthCards(
    where: HealthCardWhereInput! = {}
    orderBy: [HealthCardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HealthCard!]
  healthCardsCount(where: HealthCardWhereInput! = {}): Int
  pharmacyLocations(
    where: PharmacyLocationWhereInput! = {}
    orderBy: [PharmacyLocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PharmacyLocation!]
  pharmacyLocationsCount(where: PharmacyLocationWhereInput! = {}): Int
  prescriptions(
    where: PrescriptionWhereInput! = {}
    orderBy: [PrescriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prescription!]
  prescriptionsCount(where: PrescriptionWhereInput! = {}): Int
  savedDoctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  savedDoctorsCount(where: DoctorWhereInput! = {}): Int
  user: User
  visitedDoctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  visitedDoctorsCount(where: DoctorWhereInput! = {}): Int
}

input PatientWhereUniqueInput {
  id: ID
}

input PatientWhereInput {
  AND: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  NOT: [PatientWhereInput!]
  id: IDFilter
  isCompleteProfile: BooleanFilter
  name: StringFilter
  appointmentNotes: AppointmentNoteManyRelationFilter
  appointmentRequests: AppointmentRequestManyRelationFilter
  appointmentVitals: AppointmentVitalManyRelationFilter
  appointments: AppointmentManyRelationFilter
  bookings: BookingManyRelationFilter
  caredByDoctors: DoctorManyRelationFilter
  emergencyContacts: EmergencyContactManyRelationFilter
  forms: FormManyRelationFilter
  healthCards: HealthCardManyRelationFilter
  pharmacyLocations: PharmacyLocationManyRelationFilter
  prescriptions: PrescriptionManyRelationFilter
  savedDoctors: DoctorManyRelationFilter
  user: UserWhereInput
  visitedDoctors: DoctorManyRelationFilter
}

input AppointmentVitalManyRelationFilter {
  every: AppointmentVitalWhereInput
  some: AppointmentVitalWhereInput
  none: AppointmentVitalWhereInput
}

input EmergencyContactManyRelationFilter {
  every: EmergencyContactWhereInput
  some: EmergencyContactWhereInput
  none: EmergencyContactWhereInput
}

input HealthCardManyRelationFilter {
  every: HealthCardWhereInput
  some: HealthCardWhereInput
  none: HealthCardWhereInput
}

input PharmacyLocationManyRelationFilter {
  every: PharmacyLocationWhereInput
  some: PharmacyLocationWhereInput
  none: PharmacyLocationWhereInput
}

input PatientOrderByInput {
  id: OrderDirection
  isCompleteProfile: OrderDirection
  name: OrderDirection
}

input PatientUpdateInput {
  isCompleteProfile: Boolean
  name: String
  appointmentNotes: AppointmentNoteRelateToManyForUpdateInput
  appointmentRequests: AppointmentRequestRelateToManyForUpdateInput
  appointmentVitals: AppointmentVitalRelateToManyForUpdateInput
  appointments: AppointmentRelateToManyForUpdateInput
  bookings: BookingRelateToManyForUpdateInput
  caredByDoctors: DoctorRelateToManyForUpdateInput
  emergencyContacts: EmergencyContactRelateToManyForUpdateInput
  forms: FormRelateToManyForUpdateInput
  healthCards: HealthCardRelateToManyForUpdateInput
  pharmacyLocations: PharmacyLocationRelateToManyForUpdateInput
  prescriptions: PrescriptionRelateToManyForUpdateInput
  savedDoctors: DoctorRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  visitedDoctors: DoctorRelateToManyForUpdateInput
}

input AppointmentVitalRelateToManyForUpdateInput {
  disconnect: [AppointmentVitalWhereUniqueInput!]
  set: [AppointmentVitalWhereUniqueInput!]
  create: [AppointmentVitalCreateInput!]
  connect: [AppointmentVitalWhereUniqueInput!]
}

input EmergencyContactRelateToManyForUpdateInput {
  disconnect: [EmergencyContactWhereUniqueInput!]
  set: [EmergencyContactWhereUniqueInput!]
  create: [EmergencyContactCreateInput!]
  connect: [EmergencyContactWhereUniqueInput!]
}

input HealthCardRelateToManyForUpdateInput {
  disconnect: [HealthCardWhereUniqueInput!]
  set: [HealthCardWhereUniqueInput!]
  create: [HealthCardCreateInput!]
  connect: [HealthCardWhereUniqueInput!]
}

input PharmacyLocationRelateToManyForUpdateInput {
  disconnect: [PharmacyLocationWhereUniqueInput!]
  set: [PharmacyLocationWhereUniqueInput!]
  create: [PharmacyLocationCreateInput!]
  connect: [PharmacyLocationWhereUniqueInput!]
}

input PatientUpdateArgs {
  where: PatientWhereUniqueInput!
  data: PatientUpdateInput!
}

input PatientCreateInput {
  isCompleteProfile: Boolean
  name: String
  appointmentNotes: AppointmentNoteRelateToManyForCreateInput
  appointmentRequests: AppointmentRequestRelateToManyForCreateInput
  appointmentVitals: AppointmentVitalRelateToManyForCreateInput
  appointments: AppointmentRelateToManyForCreateInput
  bookings: BookingRelateToManyForCreateInput
  caredByDoctors: DoctorRelateToManyForCreateInput
  emergencyContacts: EmergencyContactRelateToManyForCreateInput
  forms: FormRelateToManyForCreateInput
  healthCards: HealthCardRelateToManyForCreateInput
  pharmacyLocations: PharmacyLocationRelateToManyForCreateInput
  prescriptions: PrescriptionRelateToManyForCreateInput
  savedDoctors: DoctorRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  visitedDoctors: DoctorRelateToManyForCreateInput
}

input AppointmentVitalRelateToManyForCreateInput {
  create: [AppointmentVitalCreateInput!]
  connect: [AppointmentVitalWhereUniqueInput!]
}

input EmergencyContactRelateToManyForCreateInput {
  create: [EmergencyContactCreateInput!]
  connect: [EmergencyContactWhereUniqueInput!]
}

input HealthCardRelateToManyForCreateInput {
  create: [HealthCardCreateInput!]
  connect: [HealthCardWhereUniqueInput!]
}

input PharmacyLocationRelateToManyForCreateInput {
  create: [PharmacyLocationCreateInput!]
  connect: [PharmacyLocationWhereUniqueInput!]
}

type Pharmacy {
  id: ID!
  companyName: String
  locations(
    where: PharmacyLocationWhereInput! = {}
    orderBy: [PharmacyLocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PharmacyLocation!]
  locationsCount(where: PharmacyLocationWhereInput! = {}): Int
}

input PharmacyWhereUniqueInput {
  id: ID
  companyName: String
}

input PharmacyWhereInput {
  AND: [PharmacyWhereInput!]
  OR: [PharmacyWhereInput!]
  NOT: [PharmacyWhereInput!]
  id: IDFilter
  companyName: StringFilter
  locations: PharmacyLocationManyRelationFilter
}

input PharmacyOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
}

input PharmacyUpdateInput {
  companyName: String
  locations: PharmacyLocationRelateToManyForUpdateInput
}

input PharmacyUpdateArgs {
  where: PharmacyWhereUniqueInput!
  data: PharmacyUpdateInput!
}

input PharmacyCreateInput {
  companyName: String
  locations: PharmacyLocationRelateToManyForCreateInput
}

type PharmacyLocation {
  id: ID!
  accreditationNumber: String
  faxString: String
  phoneString: String
  status: String
  address: Address
  patients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  patientsCount(where: PatientWhereInput! = {}): Int
  pharmacy: Pharmacy
}

input PharmacyLocationWhereUniqueInput {
  id: ID
  accreditationNumber: String
}

input PharmacyLocationWhereInput {
  AND: [PharmacyLocationWhereInput!]
  OR: [PharmacyLocationWhereInput!]
  NOT: [PharmacyLocationWhereInput!]
  id: IDFilter
  accreditationNumber: StringFilter
  faxString: StringFilter
  phoneString: StringFilter
  status: StringFilter
  address: AddressWhereInput
  patients: PatientManyRelationFilter
  pharmacy: PharmacyWhereInput
}

input PharmacyLocationOrderByInput {
  id: OrderDirection
  accreditationNumber: OrderDirection
  faxString: OrderDirection
  phoneString: OrderDirection
  status: OrderDirection
}

input PharmacyLocationUpdateInput {
  accreditationNumber: String
  faxString: String
  phoneString: String
  status: String
  address: AddressRelateToOneForUpdateInput
  patients: PatientRelateToManyForUpdateInput
  pharmacy: PharmacyRelateToOneForUpdateInput
}

input PharmacyRelateToOneForUpdateInput {
  create: PharmacyCreateInput
  connect: PharmacyWhereUniqueInput
  disconnect: Boolean
}

input PharmacyLocationUpdateArgs {
  where: PharmacyLocationWhereUniqueInput!
  data: PharmacyLocationUpdateInput!
}

input PharmacyLocationCreateInput {
  accreditationNumber: String
  faxString: String
  phoneString: String
  status: String
  address: AddressRelateToOneForCreateInput
  patients: PatientRelateToManyForCreateInput
  pharmacy: PharmacyRelateToOneForCreateInput
}

input PharmacyRelateToOneForCreateInput {
  create: PharmacyCreateInput
  connect: PharmacyWhereUniqueInput
}

type Prescription {
  id: ID!
  appointment: Appointment
  doctor: Doctor
  patient: Patient
  prescriptionItems(
    where: PrescriptionItemWhereInput! = {}
    orderBy: [PrescriptionItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PrescriptionItem!]
  prescriptionItemsCount(where: PrescriptionItemWhereInput! = {}): Int
}

input PrescriptionWhereUniqueInput {
  id: ID
}

input PrescriptionWhereInput {
  AND: [PrescriptionWhereInput!]
  OR: [PrescriptionWhereInput!]
  NOT: [PrescriptionWhereInput!]
  id: IDFilter
  appointment: AppointmentWhereInput
  doctor: DoctorWhereInput
  patient: PatientWhereInput
  prescriptionItems: PrescriptionItemManyRelationFilter
}

input PrescriptionOrderByInput {
  id: OrderDirection
}

input PrescriptionUpdateInput {
  appointment: AppointmentRelateToOneForUpdateInput
  doctor: DoctorRelateToOneForUpdateInput
  patient: PatientRelateToOneForUpdateInput
  prescriptionItems: PrescriptionItemRelateToManyForUpdateInput
}

input PrescriptionUpdateArgs {
  where: PrescriptionWhereUniqueInput!
  data: PrescriptionUpdateInput!
}

input PrescriptionCreateInput {
  appointment: AppointmentRelateToOneForCreateInput
  doctor: DoctorRelateToOneForCreateInput
  patient: PatientRelateToOneForCreateInput
  prescriptionItems: PrescriptionItemRelateToManyForCreateInput
}

type PrescriptionItem {
  id: ID!
  instructions: String
  luCode: String
  refills: String
  medication: Medication
  prescription: Prescription
}

input PrescriptionItemWhereUniqueInput {
  id: ID
}

input PrescriptionItemWhereInput {
  AND: [PrescriptionItemWhereInput!]
  OR: [PrescriptionItemWhereInput!]
  NOT: [PrescriptionItemWhereInput!]
  id: IDFilter
  instructions: StringFilter
  luCode: StringFilter
  refills: StringFilter
  medication: MedicationWhereInput
  prescription: PrescriptionWhereInput
}

input PrescriptionItemOrderByInput {
  id: OrderDirection
  instructions: OrderDirection
  luCode: OrderDirection
  refills: OrderDirection
}

input PrescriptionItemUpdateInput {
  instructions: String
  luCode: String
  refills: String
  medication: MedicationRelateToOneForUpdateInput
  prescription: PrescriptionRelateToOneForUpdateInput
}

input PrescriptionItemUpdateArgs {
  where: PrescriptionItemWhereUniqueInput!
  data: PrescriptionItemUpdateInput!
}

input PrescriptionItemCreateInput {
  instructions: String
  luCode: String
  refills: String
  medication: MedicationRelateToOneForCreateInput
  prescription: PrescriptionRelateToOneForCreateInput
}

type ProfilePhoto {
  id: ID!
  altText: String
  src: CloudinaryImage_File
  user: User
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProfilePhotoWhereUniqueInput {
  id: ID
}

input ProfilePhotoWhereInput {
  AND: [ProfilePhotoWhereInput!]
  OR: [ProfilePhotoWhereInput!]
  NOT: [ProfilePhotoWhereInput!]
  id: IDFilter
  altText: StringFilter
  user: UserWhereInput
}

input ProfilePhotoOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProfilePhotoUpdateInput {
  altText: String
  src: Upload
  user: UserRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProfilePhotoUpdateArgs {
  where: ProfilePhotoWhereUniqueInput!
  data: ProfilePhotoUpdateInput!
}

input ProfilePhotoCreateInput {
  altText: String
  src: Upload
  user: UserRelateToOneForCreateInput
}

type Prompt {
  id: ID!
  name: String
  promptType: String
  promptValue: String
  slug: String
  stepper: Stepper
  user: User
}

input PromptWhereUniqueInput {
  id: ID
}

input PromptWhereInput {
  AND: [PromptWhereInput!]
  OR: [PromptWhereInput!]
  NOT: [PromptWhereInput!]
  id: IDFilter
  name: StringFilter
  promptType: StringFilter
  promptValue: StringFilter
  slug: StringFilter
  stepper: StepperWhereInput
  user: UserWhereInput
}

input PromptOrderByInput {
  id: OrderDirection
  name: OrderDirection
  promptType: OrderDirection
  promptValue: OrderDirection
  slug: OrderDirection
}

input PromptUpdateInput {
  name: String
  promptType: String
  promptValue: String
  slug: String
  stepper: StepperRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input StepperRelateToOneForUpdateInput {
  create: StepperCreateInput
  connect: StepperWhereUniqueInput
  disconnect: Boolean
}

input PromptUpdateArgs {
  where: PromptWhereUniqueInput!
  data: PromptUpdateInput!
}

input PromptCreateInput {
  name: String
  promptType: String
  promptValue: String
  slug: String
  stepper: StepperRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input StepperRelateToOneForCreateInput {
  create: StepperCreateInput
  connect: StepperWhereUniqueInput
}

type ProofOfIdentification {
  id: ID!
  altText: String
  isVerified: Boolean
  src: CloudinaryImage_File
  doctor: Doctor
}

input ProofOfIdentificationWhereUniqueInput {
  id: ID
}

input ProofOfIdentificationWhereInput {
  AND: [ProofOfIdentificationWhereInput!]
  OR: [ProofOfIdentificationWhereInput!]
  NOT: [ProofOfIdentificationWhereInput!]
  id: IDFilter
  altText: StringFilter
  isVerified: BooleanFilter
  doctor: DoctorWhereInput
}

input ProofOfIdentificationOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  isVerified: OrderDirection
}

input ProofOfIdentificationUpdateInput {
  altText: String
  isVerified: Boolean
  src: Upload
  doctor: DoctorRelateToOneForUpdateInput
}

input ProofOfIdentificationUpdateArgs {
  where: ProofOfIdentificationWhereUniqueInput!
  data: ProofOfIdentificationUpdateInput!
}

input ProofOfIdentificationCreateInput {
  altText: String
  isVerified: Boolean
  src: Upload
  doctor: DoctorRelateToOneForCreateInput
}

type ProofOfInsurance {
  id: ID!
  altText: String
  isVerified: Boolean
  src: CloudinaryImage_File
  doctor: Doctor
}

input ProofOfInsuranceWhereUniqueInput {
  id: ID
}

input ProofOfInsuranceWhereInput {
  AND: [ProofOfInsuranceWhereInput!]
  OR: [ProofOfInsuranceWhereInput!]
  NOT: [ProofOfInsuranceWhereInput!]
  id: IDFilter
  altText: StringFilter
  isVerified: BooleanFilter
  doctor: DoctorWhereInput
}

input ProofOfInsuranceOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  isVerified: OrderDirection
}

input ProofOfInsuranceUpdateInput {
  altText: String
  isVerified: Boolean
  src: Upload
  doctor: DoctorRelateToOneForUpdateInput
}

input ProofOfInsuranceUpdateArgs {
  where: ProofOfInsuranceWhereUniqueInput!
  data: ProofOfInsuranceUpdateInput!
}

input ProofOfInsuranceCreateInput {
  altText: String
  isVerified: Boolean
  src: Upload
  doctor: DoctorRelateToOneForCreateInput
}

type ProofOfLicense {
  id: ID!
  altText: String
  isVerified: Boolean
  src: CloudinaryImage_File
  doctor: Doctor
}

input ProofOfLicenseWhereUniqueInput {
  id: ID
}

input ProofOfLicenseWhereInput {
  AND: [ProofOfLicenseWhereInput!]
  OR: [ProofOfLicenseWhereInput!]
  NOT: [ProofOfLicenseWhereInput!]
  id: IDFilter
  altText: StringFilter
  isVerified: BooleanFilter
  doctor: DoctorWhereInput
}

input ProofOfLicenseOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  isVerified: OrderDirection
}

input ProofOfLicenseUpdateInput {
  altText: String
  isVerified: Boolean
  src: Upload
  doctor: DoctorRelateToOneForUpdateInput
}

input ProofOfLicenseUpdateArgs {
  where: ProofOfLicenseWhereUniqueInput!
  data: ProofOfLicenseUpdateInput!
}

input ProofOfLicenseCreateInput {
  altText: String
  isVerified: Boolean
  src: Upload
  doctor: DoctorRelateToOneForCreateInput
}

type RecurringSlot {
  id: ID!
  interval: String
  intervalCount: Int
  isActive: Boolean
  wday: String
  schedule: Schedule
  timeIntervals(
    where: TimeIntervalWhereInput! = {}
    orderBy: [TimeIntervalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TimeInterval!]
  timeIntervalsCount(where: TimeIntervalWhereInput! = {}): Int
}

input RecurringSlotWhereUniqueInput {
  id: ID
}

input RecurringSlotWhereInput {
  AND: [RecurringSlotWhereInput!]
  OR: [RecurringSlotWhereInput!]
  NOT: [RecurringSlotWhereInput!]
  id: IDFilter
  interval: StringFilter
  intervalCount: IntNullableFilter
  isActive: BooleanFilter
  wday: StringFilter
  schedule: ScheduleWhereInput
  timeIntervals: TimeIntervalManyRelationFilter
}

input TimeIntervalManyRelationFilter {
  every: TimeIntervalWhereInput
  some: TimeIntervalWhereInput
  none: TimeIntervalWhereInput
}

input RecurringSlotOrderByInput {
  id: OrderDirection
  interval: OrderDirection
  intervalCount: OrderDirection
  isActive: OrderDirection
  wday: OrderDirection
}

input RecurringSlotUpdateInput {
  interval: String
  intervalCount: Int
  isActive: Boolean
  wday: String
  schedule: ScheduleRelateToOneForUpdateInput
  timeIntervals: TimeIntervalRelateToManyForUpdateInput
}

input TimeIntervalRelateToManyForUpdateInput {
  disconnect: [TimeIntervalWhereUniqueInput!]
  set: [TimeIntervalWhereUniqueInput!]
  create: [TimeIntervalCreateInput!]
  connect: [TimeIntervalWhereUniqueInput!]
}

input RecurringSlotUpdateArgs {
  where: RecurringSlotWhereUniqueInput!
  data: RecurringSlotUpdateInput!
}

input RecurringSlotCreateInput {
  interval: String
  intervalCount: Int
  isActive: Boolean
  wday: String
  schedule: ScheduleRelateToOneForCreateInput
  timeIntervals: TimeIntervalRelateToManyForCreateInput
}

input TimeIntervalRelateToManyForCreateInput {
  create: [TimeIntervalCreateInput!]
  connect: [TimeIntervalWhereUniqueInput!]
}

type Schedule {
  id: ID!
  description: String
  slotInterval: Int
  title: String
  tz: String
  calendar: Calendar
  defaultOn: Calendar
  recurringSlots(
    where: RecurringSlotWhereInput! = {}
    orderBy: [RecurringSlotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [RecurringSlot!]
  recurringSlotsCount(where: RecurringSlotWhereInput! = {}): Int
}

input ScheduleWhereUniqueInput {
  id: ID
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
  id: IDFilter
  description: StringFilter
  slotInterval: IntNullableFilter
  title: StringFilter
  tz: StringFilter
  calendar: CalendarWhereInput
  defaultOn: CalendarWhereInput
  recurringSlots: RecurringSlotManyRelationFilter
}

input RecurringSlotManyRelationFilter {
  every: RecurringSlotWhereInput
  some: RecurringSlotWhereInput
  none: RecurringSlotWhereInput
}

input ScheduleOrderByInput {
  id: OrderDirection
  description: OrderDirection
  slotInterval: OrderDirection
  title: OrderDirection
  tz: OrderDirection
}

input ScheduleUpdateInput {
  description: String
  slotInterval: Int
  title: String
  tz: String
  calendar: CalendarRelateToOneForUpdateInput
  defaultOn: CalendarRelateToOneForUpdateInput
  recurringSlots: RecurringSlotRelateToManyForUpdateInput
}

input RecurringSlotRelateToManyForUpdateInput {
  disconnect: [RecurringSlotWhereUniqueInput!]
  set: [RecurringSlotWhereUniqueInput!]
  create: [RecurringSlotCreateInput!]
  connect: [RecurringSlotWhereUniqueInput!]
}

input ScheduleUpdateArgs {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateInput!
}

input ScheduleCreateInput {
  description: String
  slotInterval: Int
  title: String
  tz: String
  calendar: CalendarRelateToOneForCreateInput
  defaultOn: CalendarRelateToOneForCreateInput
  recurringSlots: RecurringSlotRelateToManyForCreateInput
}

input RecurringSlotRelateToManyForCreateInput {
  create: [RecurringSlotCreateInput!]
  connect: [RecurringSlotWhereUniqueInput!]
}

type Stepper {
  id: ID!
  description: String
  eyebrow: String
  name: String
  slug: String
  stepsOrderBySlugs: String
  title: String
  prompt: Prompt
  stepperProgs(
    where: StepperProgWhereInput! = {}
    orderBy: [StepperProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperProg!]
  stepperProgsCount(where: StepperProgWhereInput! = {}): Int
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
  stepperSteps(
    where: StepperStepWhereInput! = {}
    orderBy: [StepperStepOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStep!]
  stepperStepsCount(where: StepperStepWhereInput! = {}): Int
}

input StepperWhereUniqueInput {
  id: ID
  slug: String
}

input StepperWhereInput {
  AND: [StepperWhereInput!]
  OR: [StepperWhereInput!]
  NOT: [StepperWhereInput!]
  id: IDFilter
  description: StringFilter
  eyebrow: StringFilter
  name: StringFilter
  slug: StringFilter
  stepsOrderBySlugs: StringFilter
  title: StringFilter
  prompt: PromptWhereInput
  stepperProgs: StepperProgManyRelationFilter
  stepperStepProgs: StepperStepProgManyRelationFilter
  stepperSteps: StepperStepManyRelationFilter
}

input StepperProgManyRelationFilter {
  every: StepperProgWhereInput
  some: StepperProgWhereInput
  none: StepperProgWhereInput
}

input StepperStepProgManyRelationFilter {
  every: StepperStepProgWhereInput
  some: StepperStepProgWhereInput
  none: StepperStepProgWhereInput
}

input StepperStepManyRelationFilter {
  every: StepperStepWhereInput
  some: StepperStepWhereInput
  none: StepperStepWhereInput
}

input StepperOrderByInput {
  id: OrderDirection
  description: OrderDirection
  eyebrow: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  stepsOrderBySlugs: OrderDirection
  title: OrderDirection
}

input StepperUpdateInput {
  description: String
  eyebrow: String
  name: String
  slug: String
  stepsOrderBySlugs: String
  title: String
  prompt: PromptRelateToOneForUpdateInput
  stepperProgs: StepperProgRelateToManyForUpdateInput
  stepperStepProgs: StepperStepProgRelateToManyForUpdateInput
  stepperSteps: StepperStepRelateToManyForUpdateInput
}

input PromptRelateToOneForUpdateInput {
  create: PromptCreateInput
  connect: PromptWhereUniqueInput
  disconnect: Boolean
}

input StepperProgRelateToManyForUpdateInput {
  disconnect: [StepperProgWhereUniqueInput!]
  set: [StepperProgWhereUniqueInput!]
  create: [StepperProgCreateInput!]
  connect: [StepperProgWhereUniqueInput!]
}

input StepperStepProgRelateToManyForUpdateInput {
  disconnect: [StepperStepProgWhereUniqueInput!]
  set: [StepperStepProgWhereUniqueInput!]
  create: [StepperStepProgCreateInput!]
  connect: [StepperStepProgWhereUniqueInput!]
}

input StepperStepRelateToManyForUpdateInput {
  disconnect: [StepperStepWhereUniqueInput!]
  set: [StepperStepWhereUniqueInput!]
  create: [StepperStepCreateInput!]
  connect: [StepperStepWhereUniqueInput!]
}

input StepperUpdateArgs {
  where: StepperWhereUniqueInput!
  data: StepperUpdateInput!
}

input StepperCreateInput {
  description: String
  eyebrow: String
  name: String
  slug: String
  stepsOrderBySlugs: String
  title: String
  prompt: PromptRelateToOneForCreateInput
  stepperProgs: StepperProgRelateToManyForCreateInput
  stepperStepProgs: StepperStepProgRelateToManyForCreateInput
  stepperSteps: StepperStepRelateToManyForCreateInput
}

input PromptRelateToOneForCreateInput {
  create: PromptCreateInput
  connect: PromptWhereUniqueInput
}

input StepperProgRelateToManyForCreateInput {
  create: [StepperProgCreateInput!]
  connect: [StepperProgWhereUniqueInput!]
}

input StepperStepProgRelateToManyForCreateInput {
  create: [StepperStepProgCreateInput!]
  connect: [StepperStepProgWhereUniqueInput!]
}

input StepperStepRelateToManyForCreateInput {
  create: [StepperStepCreateInput!]
  connect: [StepperStepWhereUniqueInput!]
}

type StepperProg {
  id: ID!
  isCompleted: Boolean
  name: String
  stepper: Stepper
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
  user: User
}

input StepperProgWhereUniqueInput {
  id: ID
}

input StepperProgWhereInput {
  AND: [StepperProgWhereInput!]
  OR: [StepperProgWhereInput!]
  NOT: [StepperProgWhereInput!]
  id: IDFilter
  isCompleted: BooleanFilter
  name: StringFilter
  stepper: StepperWhereInput
  stepperStepProgs: StepperStepProgManyRelationFilter
  user: UserWhereInput
}

input StepperProgOrderByInput {
  id: OrderDirection
  isCompleted: OrderDirection
  name: OrderDirection
}

input StepperProgUpdateInput {
  isCompleted: Boolean
  name: String
  stepper: StepperRelateToOneForUpdateInput
  stepperStepProgs: StepperStepProgRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input StepperProgUpdateArgs {
  where: StepperProgWhereUniqueInput!
  data: StepperProgUpdateInput!
}

input StepperProgCreateInput {
  isCompleted: Boolean
  name: String
  stepper: StepperRelateToOneForCreateInput
  stepperStepProgs: StepperStepProgRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

type StepperStep {
  id: ID!
  component: String
  description: String
  isFinal: Boolean
  label: String
  order: Int
  slug: String
  stepper: Stepper
  stepperStepProg: StepperStepProg
  title: String
}

input StepperStepWhereUniqueInput {
  id: ID
  slug: String
}

input StepperStepWhereInput {
  AND: [StepperStepWhereInput!]
  OR: [StepperStepWhereInput!]
  NOT: [StepperStepWhereInput!]
  id: IDFilter
  component: StringFilter
  description: StringFilter
  isFinal: BooleanFilter
  label: StringFilter
  order: IntFilter
  slug: StringFilter
  stepper: StepperWhereInput
  stepperStepProg: StepperStepProgWhereInput
  title: StringFilter
}

input StepperStepOrderByInput {
  id: OrderDirection
  component: OrderDirection
  description: OrderDirection
  isFinal: OrderDirection
  label: OrderDirection
  order: OrderDirection
  slug: OrderDirection
  title: OrderDirection
}

input StepperStepUpdateInput {
  component: String
  description: String
  isFinal: Boolean
  label: String
  order: Int
  slug: String
  stepper: StepperRelateToOneForUpdateInput
  stepperStepProg: StepperStepProgRelateToOneForUpdateInput
  title: String
}

input StepperStepProgRelateToOneForUpdateInput {
  create: StepperStepProgCreateInput
  connect: StepperStepProgWhereUniqueInput
  disconnect: Boolean
}

input StepperStepUpdateArgs {
  where: StepperStepWhereUniqueInput!
  data: StepperStepUpdateInput!
}

input StepperStepCreateInput {
  component: String
  description: String
  isFinal: Boolean
  label: String
  order: Int
  slug: String
  stepper: StepperRelateToOneForCreateInput
  stepperStepProg: StepperStepProgRelateToOneForCreateInput
  title: String
}

input StepperStepProgRelateToOneForCreateInput {
  create: StepperStepProgCreateInput
  connect: StepperStepProgWhereUniqueInput
}

type StepperStepProg {
  id: ID!
  isCompleted: Boolean
  name: String
  percentDone: Int
  stepper: Stepper
  stepperProg: StepperProg
  stepperStep: StepperStep
  user: User
}

input StepperStepProgWhereUniqueInput {
  id: ID
}

input StepperStepProgWhereInput {
  AND: [StepperStepProgWhereInput!]
  OR: [StepperStepProgWhereInput!]
  NOT: [StepperStepProgWhereInput!]
  id: IDFilter
  isCompleted: BooleanFilter
  name: StringFilter
  percentDone: IntNullableFilter
  stepper: StepperWhereInput
  stepperProg: StepperProgWhereInput
  stepperStep: StepperStepWhereInput
  user: UserWhereInput
}

input StepperStepProgOrderByInput {
  id: OrderDirection
  isCompleted: OrderDirection
  name: OrderDirection
  percentDone: OrderDirection
}

input StepperStepProgUpdateInput {
  isCompleted: Boolean
  name: String
  percentDone: Int
  stepper: StepperRelateToOneForUpdateInput
  stepperProg: StepperProgRelateToOneForUpdateInput
  stepperStep: StepperStepRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input StepperProgRelateToOneForUpdateInput {
  create: StepperProgCreateInput
  connect: StepperProgWhereUniqueInput
  disconnect: Boolean
}

input StepperStepRelateToOneForUpdateInput {
  create: StepperStepCreateInput
  connect: StepperStepWhereUniqueInput
  disconnect: Boolean
}

input StepperStepProgUpdateArgs {
  where: StepperStepProgWhereUniqueInput!
  data: StepperStepProgUpdateInput!
}

input StepperStepProgCreateInput {
  isCompleted: Boolean
  name: String
  percentDone: Int
  stepper: StepperRelateToOneForCreateInput
  stepperProg: StepperProgRelateToOneForCreateInput
  stepperStep: StepperStepRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input StepperProgRelateToOneForCreateInput {
  create: StepperProgCreateInput
  connect: StepperProgWhereUniqueInput
}

input StepperStepRelateToOneForCreateInput {
  create: StepperStepCreateInput
  connect: StepperStepWhereUniqueInput
}

type TimeInterval {
  id: ID!
  from: String
  to: String
  recurringSlot: RecurringSlot
}

input TimeIntervalWhereUniqueInput {
  id: ID
}

input TimeIntervalWhereInput {
  AND: [TimeIntervalWhereInput!]
  OR: [TimeIntervalWhereInput!]
  NOT: [TimeIntervalWhereInput!]
  id: IDFilter
  from: StringFilter
  to: StringFilter
  recurringSlot: RecurringSlotWhereInput
}

input TimeIntervalOrderByInput {
  id: OrderDirection
  from: OrderDirection
  to: OrderDirection
}

input TimeIntervalUpdateInput {
  from: String
  to: String
  recurringSlot: RecurringSlotRelateToOneForUpdateInput
}

input RecurringSlotRelateToOneForUpdateInput {
  create: RecurringSlotCreateInput
  connect: RecurringSlotWhereUniqueInput
  disconnect: Boolean
}

input TimeIntervalUpdateArgs {
  where: TimeIntervalWhereUniqueInput!
  data: TimeIntervalUpdateInput!
}

input TimeIntervalCreateInput {
  from: String
  to: String
  recurringSlot: RecurringSlotRelateToOneForCreateInput
}

input RecurringSlotRelateToOneForCreateInput {
  create: RecurringSlotCreateInput
  connect: RecurringSlotWhereUniqueInput
}

type User {
  id: ID!
  subjectId: String
  cellPhoneNumberString: String
  contracts(
    where: ContractWhereInput! = {}
    orderBy: [ContractOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contract!]
  contractsCount(where: ContractWhereInput! = {}): Int
  dateOfBirth: DateTime
  doctor: Doctor
  email: String
  firstName: String
  homePhoneNumberString: String
  isAdmin: Boolean
  isDummy: Boolean
  isOnboarded: Boolean
  isOnboardedDoctor: Boolean
  lastName: String
  middleName: String
  photoSrc: String
  sex: String
  username: String
  address: Address
  patient: Patient
  profilePhoto: ProfilePhoto
  prompts(
    where: PromptWhereInput! = {}
    orderBy: [PromptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prompt!]
  promptsCount(where: PromptWhereInput! = {}): Int
  signUpInvite: UserInvite
  stepperProgs(
    where: StepperProgWhereInput! = {}
    orderBy: [StepperProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperProg!]
  stepperProgsCount(where: StepperProgWhereInput! = {}): Int
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
  userInvites(
    where: UserInviteWhereInput! = {}
    orderBy: [UserInviteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserInvite!]
  userInvitesCount(where: UserInviteWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  subjectId: String
  email: String
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  subjectId: StringFilter
  cellPhoneNumberString: StringFilter
  contracts: ContractManyRelationFilter
  dateOfBirth: DateTimeNullableFilter
  doctor: DoctorWhereInput
  email: StringFilter
  firstName: StringFilter
  homePhoneNumberString: StringFilter
  isAdmin: BooleanFilter
  isDummy: BooleanFilter
  isOnboarded: BooleanFilter
  isOnboardedDoctor: BooleanFilter
  lastName: StringFilter
  middleName: StringFilter
  photoSrc: StringFilter
  sex: StringFilter
  username: StringFilter
  address: AddressWhereInput
  patient: PatientWhereInput
  profilePhoto: ProfilePhotoWhereInput
  prompts: PromptManyRelationFilter
  signUpInvite: UserInviteWhereInput
  stepperProgs: StepperProgManyRelationFilter
  stepperStepProgs: StepperStepProgManyRelationFilter
  userInvites: UserInviteManyRelationFilter
}

input ContractManyRelationFilter {
  every: ContractWhereInput
  some: ContractWhereInput
  none: ContractWhereInput
}

input PromptManyRelationFilter {
  every: PromptWhereInput
  some: PromptWhereInput
  none: PromptWhereInput
}

input UserInviteManyRelationFilter {
  every: UserInviteWhereInput
  some: UserInviteWhereInput
  none: UserInviteWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  subjectId: OrderDirection
  cellPhoneNumberString: OrderDirection
  dateOfBirth: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  homePhoneNumberString: OrderDirection
  isAdmin: OrderDirection
  isDummy: OrderDirection
  isOnboarded: OrderDirection
  isOnboardedDoctor: OrderDirection
  lastName: OrderDirection
  middleName: OrderDirection
  photoSrc: OrderDirection
  sex: OrderDirection
  username: OrderDirection
}

input UserUpdateInput {
  subjectId: String
  cellPhoneNumberString: String
  contracts: ContractRelateToManyForUpdateInput
  dateOfBirth: DateTime
  doctor: DoctorRelateToOneForUpdateInput
  email: String
  firstName: String
  homePhoneNumberString: String
  isAdmin: Boolean
  isDummy: Boolean
  isOnboarded: Boolean
  isOnboardedDoctor: Boolean
  lastName: String
  middleName: String
  photoSrc: String
  sex: String
  username: String
  address: AddressRelateToOneForUpdateInput
  patient: PatientRelateToOneForUpdateInput
  profilePhoto: ProfilePhotoRelateToOneForUpdateInput
  prompts: PromptRelateToManyForUpdateInput
  signUpInvite: UserInviteRelateToOneForUpdateInput
  stepperProgs: StepperProgRelateToManyForUpdateInput
  stepperStepProgs: StepperStepProgRelateToManyForUpdateInput
  userInvites: UserInviteRelateToManyForUpdateInput
}

input ContractRelateToManyForUpdateInput {
  disconnect: [ContractWhereUniqueInput!]
  set: [ContractWhereUniqueInput!]
  create: [ContractCreateInput!]
  connect: [ContractWhereUniqueInput!]
}

input ProfilePhotoRelateToOneForUpdateInput {
  create: ProfilePhotoCreateInput
  connect: ProfilePhotoWhereUniqueInput
  disconnect: Boolean
}

input PromptRelateToManyForUpdateInput {
  disconnect: [PromptWhereUniqueInput!]
  set: [PromptWhereUniqueInput!]
  create: [PromptCreateInput!]
  connect: [PromptWhereUniqueInput!]
}

input UserInviteRelateToManyForUpdateInput {
  disconnect: [UserInviteWhereUniqueInput!]
  set: [UserInviteWhereUniqueInput!]
  create: [UserInviteCreateInput!]
  connect: [UserInviteWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  subjectId: String
  cellPhoneNumberString: String
  contracts: ContractRelateToManyForCreateInput
  dateOfBirth: DateTime
  doctor: DoctorRelateToOneForCreateInput
  email: String
  firstName: String
  homePhoneNumberString: String
  isAdmin: Boolean
  isDummy: Boolean
  isOnboarded: Boolean
  isOnboardedDoctor: Boolean
  lastName: String
  middleName: String
  photoSrc: String
  sex: String
  username: String
  address: AddressRelateToOneForCreateInput
  patient: PatientRelateToOneForCreateInput
  profilePhoto: ProfilePhotoRelateToOneForCreateInput
  prompts: PromptRelateToManyForCreateInput
  signUpInvite: UserInviteRelateToOneForCreateInput
  stepperProgs: StepperProgRelateToManyForCreateInput
  stepperStepProgs: StepperStepProgRelateToManyForCreateInput
  userInvites: UserInviteRelateToManyForCreateInput
}

input ContractRelateToManyForCreateInput {
  create: [ContractCreateInput!]
  connect: [ContractWhereUniqueInput!]
}

input ProfilePhotoRelateToOneForCreateInput {
  create: ProfilePhotoCreateInput
  connect: ProfilePhotoWhereUniqueInput
}

input PromptRelateToManyForCreateInput {
  create: [PromptCreateInput!]
  connect: [PromptWhereUniqueInput!]
}

input UserInviteRelateToManyForCreateInput {
  create: [UserInviteCreateInput!]
  connect: [UserInviteWhereUniqueInput!]
}

type UserInvite {
  id: ID!
  cellPhoneNumberString: String
  dateOfBirth: DateTime
  email: String
  firstName: String
  lastName: String
  middleName: String
  sex: String
  healthCard: HealthCard
  invitedByUser: User
  signedUpUser: User
}

input UserInviteWhereUniqueInput {
  id: ID
  email: String
}

input UserInviteWhereInput {
  AND: [UserInviteWhereInput!]
  OR: [UserInviteWhereInput!]
  NOT: [UserInviteWhereInput!]
  id: IDFilter
  cellPhoneNumberString: StringFilter
  dateOfBirth: DateTimeNullableFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  middleName: StringFilter
  sex: StringFilter
  healthCard: HealthCardWhereInput
  invitedByUser: UserWhereInput
  signedUpUser: UserWhereInput
}

input UserInviteOrderByInput {
  id: OrderDirection
  cellPhoneNumberString: OrderDirection
  dateOfBirth: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  middleName: OrderDirection
  sex: OrderDirection
}

input UserInviteUpdateInput {
  cellPhoneNumberString: String
  dateOfBirth: DateTime
  email: String
  firstName: String
  lastName: String
  middleName: String
  sex: String
  healthCard: HealthCardRelateToOneForUpdateInput
  invitedByUser: UserRelateToOneForUpdateInput
  signedUpUser: UserRelateToOneForUpdateInput
}

input HealthCardRelateToOneForUpdateInput {
  create: HealthCardCreateInput
  connect: HealthCardWhereUniqueInput
  disconnect: Boolean
}

input UserInviteUpdateArgs {
  where: UserInviteWhereUniqueInput!
  data: UserInviteUpdateInput!
}

input UserInviteCreateInput {
  cellPhoneNumberString: String
  dateOfBirth: DateTime
  email: String
  firstName: String
  lastName: String
  middleName: String
  sex: String
  healthCard: HealthCardRelateToOneForCreateInput
  invitedByUser: UserRelateToOneForCreateInput
  signedUpUser: UserRelateToOneForCreateInput
}

input HealthCardRelateToOneForCreateInput {
  create: HealthCardCreateInput
  connect: HealthCardWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  activeIngredients(
    where: ActiveIngredientWhereInput! = {}
    orderBy: [ActiveIngredientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ActiveIngredient!]
  activeIngredient(where: ActiveIngredientWhereUniqueInput!): ActiveIngredient
  activeIngredientsCount(where: ActiveIngredientWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  administrativeAreas(
    where: AdministrativeAreaWhereInput! = {}
    orderBy: [AdministrativeAreaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AdministrativeArea!]
  administrativeArea(
    where: AdministrativeAreaWhereUniqueInput!
  ): AdministrativeArea
  administrativeAreasCount(where: AdministrativeAreaWhereInput! = {}): Int
  appointments(
    where: AppointmentWhereInput! = {}
    orderBy: [AppointmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Appointment!]
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointmentsCount(where: AppointmentWhereInput! = {}): Int
  appointmentBillings(
    where: AppointmentBillingWhereInput! = {}
    orderBy: [AppointmentBillingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentBilling!]
  appointmentBilling(
    where: AppointmentBillingWhereUniqueInput!
  ): AppointmentBilling
  appointmentBillingsCount(where: AppointmentBillingWhereInput! = {}): Int
  appointmentBillingItems(
    where: AppointmentBillingItemWhereInput! = {}
    orderBy: [AppointmentBillingItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentBillingItem!]
  appointmentBillingItem(
    where: AppointmentBillingItemWhereUniqueInput!
  ): AppointmentBillingItem
  appointmentBillingItemsCount(
    where: AppointmentBillingItemWhereInput! = {}
  ): Int
  appointmentNotes(
    where: AppointmentNoteWhereInput! = {}
    orderBy: [AppointmentNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentNote!]
  appointmentNote(where: AppointmentNoteWhereUniqueInput!): AppointmentNote
  appointmentNotesCount(where: AppointmentNoteWhereInput! = {}): Int
  appointmentRequests(
    where: AppointmentRequestWhereInput! = {}
    orderBy: [AppointmentRequestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentRequest!]
  appointmentRequest(
    where: AppointmentRequestWhereUniqueInput!
  ): AppointmentRequest
  appointmentRequestsCount(where: AppointmentRequestWhereInput! = {}): Int
  appointmentVitals(
    where: AppointmentVitalWhereInput! = {}
    orderBy: [AppointmentVitalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AppointmentVital!]
  appointmentVital(where: AppointmentVitalWhereUniqueInput!): AppointmentVital
  appointmentVitalsCount(where: AppointmentVitalWhereInput! = {}): Int
  billingClaims(
    where: BillingClaimWhereInput! = {}
    orderBy: [BillingClaimOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BillingClaim!]
  billingClaim(where: BillingClaimWhereUniqueInput!): BillingClaim
  billingClaimsCount(where: BillingClaimWhereInput! = {}): Int
  billingDiagnoses(
    where: BillingDiagnosisWhereInput! = {}
    orderBy: [BillingDiagnosisOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BillingDiagnosis!]
  billingDiagnosis(where: BillingDiagnosisWhereUniqueInput!): BillingDiagnosis
  billingDiagnosesCount(where: BillingDiagnosisWhereInput! = {}): Int
  bookings(
    where: BookingWhereInput! = {}
    orderBy: [BookingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Booking!]
  booking(where: BookingWhereUniqueInput!): Booking
  bookingsCount(where: BookingWhereInput! = {}): Int
  calendars(
    where: CalendarWhereInput! = {}
    orderBy: [CalendarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Calendar!]
  calendar(where: CalendarWhereUniqueInput!): Calendar
  calendarsCount(where: CalendarWhereInput! = {}): Int
  calendarEvents(
    where: CalendarEventWhereInput! = {}
    orderBy: [CalendarEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CalendarEvent!]
  calendarEvent(where: CalendarEventWhereUniqueInput!): CalendarEvent
  calendarEventsCount(where: CalendarEventWhereInput! = {}): Int
  calendarEventTypes(
    where: CalendarEventTypeWhereInput! = {}
    orderBy: [CalendarEventTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CalendarEventType!]
  calendarEventType(
    where: CalendarEventTypeWhereUniqueInput!
  ): CalendarEventType
  calendarEventTypesCount(where: CalendarEventTypeWhereInput! = {}): Int
  companies(
    where: CompanyWhereInput! = {}
    orderBy: [CompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  companyLocations(
    where: CompanyLocationWhereInput! = {}
    orderBy: [CompanyLocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CompanyLocation!]
  companyLocation(where: CompanyLocationWhereUniqueInput!): CompanyLocation
  companyLocationsCount(where: CompanyLocationWhereInput! = {}): Int
  contracts(
    where: ContractWhereInput! = {}
    orderBy: [ContractOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contract!]
  contract(where: ContractWhereUniqueInput!): Contract
  contractsCount(where: ContractWhereInput! = {}): Int
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  doctors(
    where: DoctorWhereInput! = {}
    orderBy: [DoctorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Doctor!]
  doctor(where: DoctorWhereUniqueInput!): Doctor
  doctorsCount(where: DoctorWhereInput! = {}): Int
  doctorSpecialties(
    where: DoctorSpecialtyWhereInput! = {}
    orderBy: [DoctorSpecialtyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DoctorSpecialty!]
  doctorSpecialty(where: DoctorSpecialtyWhereUniqueInput!): DoctorSpecialty
  doctorSpecialtiesCount(where: DoctorSpecialtyWhereInput! = {}): Int
  doctorSubSpecialties(
    where: DoctorSubSpecialtyWhereInput! = {}
    orderBy: [DoctorSubSpecialtyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DoctorSubSpecialty!]
  doctorSubSpecialty(
    where: DoctorSubSpecialtyWhereUniqueInput!
  ): DoctorSubSpecialty
  doctorSubSpecialtiesCount(where: DoctorSubSpecialtyWhereInput! = {}): Int
  emergencyContacts(
    where: EmergencyContactWhereInput! = {}
    orderBy: [EmergencyContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmergencyContact!]
  emergencyContact(where: EmergencyContactWhereUniqueInput!): EmergencyContact
  emergencyContactsCount(where: EmergencyContactWhereInput! = {}): Int
  forms(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  form(where: FormWhereUniqueInput!): Form
  formsCount(where: FormWhereInput! = {}): Int
  formTypes(
    where: FormTypeWhereInput! = {}
    orderBy: [FormTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormType!]
  formType(where: FormTypeWhereUniqueInput!): FormType
  formTypesCount(where: FormTypeWhereInput! = {}): Int
  healthCards(
    where: HealthCardWhereInput! = {}
    orderBy: [HealthCardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HealthCard!]
  healthCard(where: HealthCardWhereUniqueInput!): HealthCard
  healthCardsCount(where: HealthCardWhereInput! = {}): Int
  languages(
    where: LanguageWhereInput! = {}
    orderBy: [LanguageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Language!]
  language(where: LanguageWhereUniqueInput!): Language
  languagesCount(where: LanguageWhereInput! = {}): Int
  medications(
    where: MedicationWhereInput! = {}
    orderBy: [MedicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Medication!]
  medication(where: MedicationWhereUniqueInput!): Medication
  medicationsCount(where: MedicationWhereInput! = {}): Int
  patients(
    where: PatientWhereInput! = {}
    orderBy: [PatientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Patient!]
  patient(where: PatientWhereUniqueInput!): Patient
  patientsCount(where: PatientWhereInput! = {}): Int
  pharmacies(
    where: PharmacyWhereInput! = {}
    orderBy: [PharmacyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pharmacy!]
  pharmacy(where: PharmacyWhereUniqueInput!): Pharmacy
  pharmaciesCount(where: PharmacyWhereInput! = {}): Int
  pharmacyLocations(
    where: PharmacyLocationWhereInput! = {}
    orderBy: [PharmacyLocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PharmacyLocation!]
  pharmacyLocation(where: PharmacyLocationWhereUniqueInput!): PharmacyLocation
  pharmacyLocationsCount(where: PharmacyLocationWhereInput! = {}): Int
  prescriptions(
    where: PrescriptionWhereInput! = {}
    orderBy: [PrescriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prescription!]
  prescription(where: PrescriptionWhereUniqueInput!): Prescription
  prescriptionsCount(where: PrescriptionWhereInput! = {}): Int
  prescriptionItems(
    where: PrescriptionItemWhereInput! = {}
    orderBy: [PrescriptionItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PrescriptionItem!]
  prescriptionItem(where: PrescriptionItemWhereUniqueInput!): PrescriptionItem
  prescriptionItemsCount(where: PrescriptionItemWhereInput! = {}): Int
  profilePhotos(
    where: ProfilePhotoWhereInput! = {}
    orderBy: [ProfilePhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProfilePhoto!]
  profilePhoto(where: ProfilePhotoWhereUniqueInput!): ProfilePhoto
  profilePhotosCount(where: ProfilePhotoWhereInput! = {}): Int
  prompts(
    where: PromptWhereInput! = {}
    orderBy: [PromptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prompt!]
  prompt(where: PromptWhereUniqueInput!): Prompt
  promptsCount(where: PromptWhereInput! = {}): Int
  proofOfIdentifications(
    where: ProofOfIdentificationWhereInput! = {}
    orderBy: [ProofOfIdentificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProofOfIdentification!]
  proofOfIdentification(
    where: ProofOfIdentificationWhereUniqueInput!
  ): ProofOfIdentification
  proofOfIdentificationsCount(where: ProofOfIdentificationWhereInput! = {}): Int
  proofOfInsurances(
    where: ProofOfInsuranceWhereInput! = {}
    orderBy: [ProofOfInsuranceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProofOfInsurance!]
  proofOfInsurance(where: ProofOfInsuranceWhereUniqueInput!): ProofOfInsurance
  proofOfInsurancesCount(where: ProofOfInsuranceWhereInput! = {}): Int
  proofOfLicenses(
    where: ProofOfLicenseWhereInput! = {}
    orderBy: [ProofOfLicenseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProofOfLicense!]
  proofOfLicense(where: ProofOfLicenseWhereUniqueInput!): ProofOfLicense
  proofOfLicensesCount(where: ProofOfLicenseWhereInput! = {}): Int
  recurringSlots(
    where: RecurringSlotWhereInput! = {}
    orderBy: [RecurringSlotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [RecurringSlot!]
  recurringSlot(where: RecurringSlotWhereUniqueInput!): RecurringSlot
  recurringSlotsCount(where: RecurringSlotWhereInput! = {}): Int
  schedules(
    where: ScheduleWhereInput! = {}
    orderBy: [ScheduleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Schedule!]
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedulesCount(where: ScheduleWhereInput! = {}): Int
  steppers(
    where: StepperWhereInput! = {}
    orderBy: [StepperOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stepper!]
  stepper(where: StepperWhereUniqueInput!): Stepper
  steppersCount(where: StepperWhereInput! = {}): Int
  stepperProgs(
    where: StepperProgWhereInput! = {}
    orderBy: [StepperProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperProg!]
  stepperProg(where: StepperProgWhereUniqueInput!): StepperProg
  stepperProgsCount(where: StepperProgWhereInput! = {}): Int
  stepperSteps(
    where: StepperStepWhereInput! = {}
    orderBy: [StepperStepOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStep!]
  stepperStep(where: StepperStepWhereUniqueInput!): StepperStep
  stepperStepsCount(where: StepperStepWhereInput! = {}): Int
  stepperStepProgs(
    where: StepperStepProgWhereInput! = {}
    orderBy: [StepperStepProgOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StepperStepProg!]
  stepperStepProg(where: StepperStepProgWhereUniqueInput!): StepperStepProg
  stepperStepProgsCount(where: StepperStepProgWhereInput! = {}): Int
  timeIntervals(
    where: TimeIntervalWhereInput! = {}
    orderBy: [TimeIntervalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TimeInterval!]
  timeInterval(where: TimeIntervalWhereUniqueInput!): TimeInterval
  timeIntervalsCount(where: TimeIntervalWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userInvites(
    where: UserInviteWhereInput! = {}
    orderBy: [UserInviteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserInvite!]
  userInvite(where: UserInviteWhereUniqueInput!): UserInvite
  userInvitesCount(where: UserInviteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
