// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Booking {
  id           String    @id @default(cuid())
  name         String    @default("")
  isConfirmed  Boolean   @default(false)
  durationMins Int
  startsAt     DateTime?
  notes        String    @default("")
  patient      Patient[] @relation("Booking_patient")
}

model Calendar {
  id   String @id @default(cuid())
  name String @default("")
}

model Doctor {
  id                String           @id @default(cuid())
  user              User?            @relation("Doctor_user", fields: [userId], references: [id])
  userId            String?          @unique @map("user")
  isCompleteProfile Boolean          @default(false)
  isVerified        Boolean          @default(false)
  languages         DoctorLanguage[] @relation("Doctor_languages")
  doctorSince       DateTime
  summary           String           @default("")
  email             String           @unique @default("")
  patients          Patient[]        @relation("Doctor_patients")
  savedByPatients   Patient[]        @relation("Doctor_savedByPatients")
}

model DoctorLanguage {
  id      String   @id @default(cuid())
  label   String   @default("")
  value   String   @default("")
  doctors Doctor[] @relation("Doctor_languages")
}

model HealthCard {
  id                    String   @id @default(cuid())
  patient               Patient? @relation("HealthCard_patient", fields: [patientId], references: [id])
  patientId             String?  @map("patient")
  isVerified            Boolean  @default(false)
  expiryDate            DateTime
  nameOnCard            String   @default("")
  insurancePolicyNumber String   @default("")
  dateOfBirth           DateTime
  versionCode           String   @default("")

  @@index([patientId])
}

model User {
  id               String            @id @default(cuid())
  firstName        String            @default("")
  lastName         String            @default("")
  doctor           Doctor?           @relation("Doctor_user")
  email            String            @unique @default("")
  password         String
  prompts          Prompt[]          @relation("Prompt_user")
  patient          Patient?          @relation("Patient_user")
  stepperProgs     StepperProg[]     @relation("StepperProg_user")
  stepperStepProgs StepperStepProg[] @relation("StepperStepProg_user")
}

model Patient {
  id                String       @id @default(cuid())
  bookings          Booking[]    @relation("Booking_patient")
  name              String       @default("")
  isCompleteProfile Boolean      @default(false)
  user              User?        @relation("Patient_user", fields: [userId], references: [id])
  userId            String?      @unique @map("user")
  healthCards       HealthCard[] @relation("HealthCard_patient")
  visitedDoctors    Doctor[]     @relation("Doctor_patients")
  savedDoctors      Doctor[]     @relation("Doctor_savedByPatients")
}

model Prompt {
  id          String   @id @default(cuid())
  stepper     Stepper? @relation("Prompt_stepper", fields: [stepperId], references: [id])
  stepperId   String?  @unique @map("stepper")
  user        User?    @relation("Prompt_user", fields: [userId], references: [id])
  userId      String?  @map("user")
  name        String   @default("")
  promptType  String   @default("")
  promptValue String   @default("")
  slug        String   @default("")

  @@index([userId])
}

model Stepper {
  id               String            @id @default(cuid())
  title            String            @default("")
  name             String            @default("")
  slug             String            @default("")
  description      String            @default("")
  eyebrow          String            @default("")
  prompt           Prompt?           @relation("Prompt_stepper")
  stepperSteps     StepperStep[]     @relation("StepperStep_stepper")
  stepperProgs     StepperProg[]     @relation("StepperProg_stepper")
  stepperStepProgs StepperStepProg[] @relation("StepperStepProg_stepper")
}

model StepperProg {
  id               String            @id @default(cuid())
  name             String            @default("")
  isCompleted      Boolean           @default(false)
  stepper          Stepper?          @relation("StepperProg_stepper", fields: [stepperId], references: [id])
  stepperId        String?           @map("stepper")
  stepperStepProgs StepperStepProg[] @relation("StepperStepProg_stepperProg")
  user             User?             @relation("StepperProg_user", fields: [userId], references: [id])
  userId           String?           @map("user")

  @@index([stepperId])
  @@index([userId])
}

model StepperStep {
  id                String           @id @default(cuid())
  title             String           @default("")
  description       String           @default("")
  component         String           @default("")
  slug              String           @default("")
  isFinal           Boolean          @default(false)
  order             Int
  stepper           Stepper?         @relation("StepperStep_stepper", fields: [stepperId], references: [id])
  stepperId         String?          @map("stepper")
  stepperStepProg   StepperStepProg? @relation("StepperStep_stepperStepProg", fields: [stepperStepProgId], references: [id])
  stepperStepProgId String?          @unique @map("stepperStepProg")

  @@index([stepperId])
}

model StepperStepProg {
  id            String       @id @default(cuid())
  name          String       @default("")
  percentDone   Int
  isCompleted   Boolean      @default(false)
  stepper       Stepper?     @relation("StepperStepProg_stepper", fields: [stepperId], references: [id])
  stepperId     String?      @map("stepper")
  stepperStep   StepperStep? @relation("StepperStep_stepperStepProg")
  stepperProg   StepperProg? @relation("StepperStepProg_stepperProg", fields: [stepperProgId], references: [id])
  stepperProgId String?      @map("stepperProg")
  user          User?        @relation("StepperStepProg_user", fields: [userId], references: [id])
  userId        String?      @map("user")

  @@index([stepperId])
  @@index([stepperProgId])
  @@index([userId])
}