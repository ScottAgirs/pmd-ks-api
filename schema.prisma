// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Address {
  id                 String            @id @default(cuid())
  addressLine1       String            @default("")
  addressLine2       String            @default("")
  administrativeArea String            @default("")
  country            String            @default("")
  locality           String            @default("")
  postalCode         String            @default("")
  premise            String            @default("")
  thoroughfare       String            @default("")
  user               User?             @relation("Address_user", fields: [userId], references: [id])
  userId             String?           @unique @map("user")
  calendarEvents     CalendarEvent[]   @relation("CalendarEvent_address")
  doctorClinic       Doctor?           @relation("Address_doctorClinic", fields: [doctorClinicId], references: [id])
  doctorClinicId     String?           @unique @map("doctorClinic")
  pharmacyLocation   PharmacyLocation? @relation("Address_pharmacyLocation", fields: [pharmacyLocationId], references: [id])
  pharmacyLocationId String?           @unique @map("pharmacyLocation")
}

model Appointment {
  id                String              @id @default(cuid())
  billing           AppointmentBilling? @relation("Appointment_billing", fields: [billingId], references: [id])
  billingId         String?             @unique @map("billing")
  booking           Booking?            @relation("Appointment_booking", fields: [bookingId], references: [id])
  bookingId         String?             @unique @map("booking")
  doctor            Doctor?             @relation("Appointment_doctor", fields: [doctorId], references: [id])
  doctorId          String?             @map("doctor")
  isSigned          Boolean             @default(false)
  isSignedOn        DateTime?           @default(now())
  forms             Form[]              @relation("Form_appointment")
  notes             AppointmentNote[]   @relation("AppointmentNote_appointment")
  patient           Patient?            @relation("Appointment_patient", fields: [patientId], references: [id])
  patientId         String?             @map("patient")
  prescription      Prescription?       @relation("Appointment_prescription", fields: [prescriptionId], references: [id])
  prescriptionId    String?             @unique @map("prescription")
  reason            String              @default("")
  vitalsData        AppointmentVital?   @relation("Appointment_vitalsData", fields: [vitalsDataId], references: [id])
  vitalsDataId      String?             @unique @map("vitalsData")
  scheduledStartsAt DateTime?
  scheduledEndsAt   DateTime?
  startedAt         DateTime?
  summaryString     String              @default("")
  summary           Json                @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  endedAt           DateTime?

  @@index([doctorId])
  @@index([patientId])
}

model AppointmentBilling {
  id           String                   @id @default(cuid())
  appointment  Appointment?             @relation("Appointment_billing")
  doctor       Doctor?                  @relation("AppointmentBilling_doctor", fields: [doctorId], references: [id])
  doctorId     String?                  @map("doctor")
  billingItems AppointmentBillingItem[] @relation("AppointmentBillingItem_billing")
  status       String                   @default("")

  @@index([doctorId])
}

model AppointmentBillingItem {
  id            String              @id @default(cuid())
  billing       AppointmentBilling? @relation("AppointmentBillingItem_billing", fields: [billingId], references: [id])
  billingId     String?             @map("billing")
  feeCode       String              @default("")
  diagnosisCode String              @default("")
  units         String              @default("")

  @@index([billingId])
}

model AppointmentNote {
  id            String       @id @default(cuid())
  appointment   Appointment? @relation("AppointmentNote_appointment", fields: [appointmentId], references: [id])
  appointmentId String?      @map("appointment")
  createdAt     DateTime?    @default(now())
  patient       Patient?     @relation("AppointmentNote_patient", fields: [patientId], references: [id])
  patientId     String?      @map("patient")
  summary       String       @default("")
  title         String       @default("")

  @@index([appointmentId])
  @@index([patientId])
}

model AppointmentVital {
  id               String       @id @default(cuid())
  appointment      Appointment? @relation("Appointment_vitalsData")
  patient          Patient?     @relation("AppointmentVital_patient", fields: [patientId], references: [id])
  patientId        String?      @map("patient")
  meters           Int?
  cm               Int?
  kg               Int?
  oxygenSaturation Int?
  heartRate        Int?
  temperature      Int?
  bloodPressure    String       @default("")
  resp             Int?

  @@index([patientId])
}

model Booking {
  id           String         @id @default(cuid())
  appointment  Appointment?   @relation("Appointment_booking")
  calendar     Calendar?      @relation("Booking_calendar", fields: [calendarId], references: [id])
  calendarId   String?        @map("calendar")
  doctor       Doctor?        @relation("Booking_doctor", fields: [doctorId], references: [id])
  doctorId     String?        @map("doctor")
  durationMins Int
  event        CalendarEvent? @relation("Booking_event", fields: [eventId], references: [id])
  eventId      String?        @map("event")
  isConfirmed  Boolean        @default(false)
  name         String         @default("")
  patient      Patient?       @relation("Booking_patient", fields: [patientId], references: [id])
  patientId    String?        @map("patient")
  startsAt     DateTime?
  tzTarget     String         @default("")
  endsAt       DateTime?

  @@index([calendarId])
  @@index([doctorId])
  @@index([eventId])
  @@index([patientId])
}

model Form {
  id            String       @id @default(cuid())
  appointment   Appointment? @relation("Form_appointment", fields: [appointmentId], references: [id])
  appointmentId String?      @map("appointment")
  formType      FormType?    @relation("Form_formType", fields: [formTypeId], references: [id])
  formTypeId    String?      @map("formType")
  name          String       @default("")
  doctor        Doctor?      @relation("Form_doctor", fields: [doctorId], references: [id])
  doctorId      String?      @map("doctor")
  patient       Patient?     @relation("Form_patient", fields: [patientId], references: [id])
  patientId     String?      @map("patient")
  slug          String       @default("")

  @@index([appointmentId])
  @@index([formTypeId])
  @@index([doctorId])
  @@index([patientId])
}

model FormType {
  id    String @id @default(cuid())
  name  String @default("")
  forms Form[] @relation("Form_formType")
  slug  String @default("")
}

model Calendar {
  id                String          @id @default(cuid())
  name              String          @default("")
  events            CalendarEvent[] @relation("CalendarEvent_calendar")
  bookings          Booking[]       @relation("Booking_calendar")
  doctor            Doctor?         @relation("Calendar_doctor", fields: [doctorId], references: [id])
  doctorId          String?         @unique @map("doctor")
  schedules         Schedule[]      @relation("Schedule_calendar")
  defaultSchedule   Schedule?       @relation("Calendar_defaultSchedule", fields: [defaultScheduleId], references: [id])
  defaultScheduleId String?         @unique @map("defaultSchedule")
}

model CalendarEvent {
  id                     String             @id @default(cuid())
  description            String             @default("")
  durationMins           Int
  isActive               Boolean            @default(false)
  isConfirmationRequired Boolean            @default(false)
  title                  String             @default("")
  address                Address?           @relation("CalendarEvent_address", fields: [addressId], references: [id])
  addressId              String?            @map("address")
  bookings               Booking[]          @relation("Booking_event")
  calendar               Calendar?          @relation("CalendarEvent_calendar", fields: [calendarId], references: [id])
  calendarId             String?            @map("calendar")
  eventType              CalendarEventType? @relation("CalendarEvent_eventType", fields: [eventTypeId], references: [id])
  eventTypeId            String?            @map("eventType")
  doctor                 Doctor?            @relation("CalendarEvent_doctor", fields: [doctorId], references: [id])
  doctorId               String?            @map("doctor")

  @@index([addressId])
  @@index([calendarId])
  @@index([eventTypeId])
  @@index([doctorId])
}

model CalendarEventType {
  id     String          @id @default(cuid())
  label  String          @default("")
  value  String          @unique @default("")
  events CalendarEvent[] @relation("CalendarEvent_eventType")
}

model Schedule {
  id             String          @id @default(cuid())
  calendar       Calendar?       @relation("Schedule_calendar", fields: [calendarId], references: [id])
  calendarId     String?         @map("calendar")
  description    String          @default("")
  defaultOn      Calendar?       @relation("Calendar_defaultSchedule")
  recurringSlots RecurringSlot[] @relation("RecurringSlot_schedule")
  tz             String          @default("")
  slotInterval   Int?
  title          String          @default("")

  @@index([calendarId])
}

model RecurringSlot {
  id            String         @id @default(cuid())
  wday          String         @default("")
  isActive      Boolean        @default(false)
  interval      String         @default("")
  intervalCount Int?
  schedule      Schedule?      @relation("RecurringSlot_schedule", fields: [scheduleId], references: [id])
  scheduleId    String?        @map("schedule")
  timeIntervals TimeInterval[] @relation("TimeInterval_recurringSlot")

  @@index([scheduleId])
}

model TimeInterval {
  id              String         @id @default(cuid())
  from            String         @default("")
  to              String         @default("")
  recurringSlot   RecurringSlot? @relation("TimeInterval_recurringSlot", fields: [recurringSlotId], references: [id])
  recurringSlotId String?        @map("recurringSlot")

  @@index([recurringSlotId])
}

model Contract {
  id            String    @id @default(cuid())
  signedBy      User[]    @relation("Contract_signedBy")
  isActive      Boolean   @default(false)
  body          Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  name          String    @default("")
  slug          String    @unique @default("")
  effectiveFrom DateTime?
  lastUpdated   DateTime?
}

model Doctor {
  id                       String                 @id @default(cuid())
  clinicName               String                 @default("")
  clinicPhoneNumber        String                 @default("")
  clinicFaxNumber          String                 @default("")
  clinicFMN                String                 @default("")
  clinicSLI                String                 @default("")
  clinicOHIPBillingCode    String                 @default("")
  calendar                 Calendar?              @relation("Calendar_doctor")
  contractSignedOn         DateTime?
  doctorSince              DateTime?
  email                    String                 @default("")
  isCompleteProfile        Boolean                @default(false)
  isVerified               Boolean                @default(false)
  licenseNumber            String                 @default("")
  licenseProvider          String                 @default("")
  medicalLiabilityProvider String                 @default("")
  medicalLiabilityNumber   String                 @default("")
  province                 String                 @default("")
  summary                  String                 @default("")
  appointments             Appointment[]          @relation("Appointment_doctor")
  billings                 AppointmentBilling[]   @relation("AppointmentBilling_doctor")
  bookings                 Booking[]              @relation("Booking_doctor")
  caringForPatients        Patient[]              @relation("Doctor_caringForPatients")
  calendarEvents           CalendarEvent[]        @relation("CalendarEvent_doctor")
  clinicAddress            Address?               @relation("Address_doctorClinic")
  doctorSpecialty          DoctorSpecialty?       @relation("Doctor_doctorSpecialty", fields: [doctorSpecialtyId], references: [id])
  doctorSpecialtyId        String?                @map("doctorSpecialty")
  doctorSubSpecialties     DoctorSubSpecialty[]   @relation("Doctor_doctorSubSpecialties")
  forms                    Form[]                 @relation("Form_doctor")
  languages                Language[]             @relation("Doctor_languages")
  patients                 Patient[]              @relation("Doctor_patients")
  prescriptions            Prescription[]         @relation("Prescription_doctor")
  proofOfIdentification    ProofOfIdentification? @relation("Doctor_proofOfIdentification", fields: [proofOfIdentificationId], references: [id])
  proofOfIdentificationId  String?                @unique @map("proofOfIdentification")
  proofOfInsurance         ProofOfInsurance?      @relation("Doctor_proofOfInsurance", fields: [proofOfInsuranceId], references: [id])
  proofOfInsuranceId       String?                @unique @map("proofOfInsurance")
  proofOfLicense           ProofOfLicense?        @relation("Doctor_proofOfLicense", fields: [proofOfLicenseId], references: [id])
  proofOfLicenseId         String?                @unique @map("proofOfLicense")
  savedByPatients          Patient[]              @relation("Doctor_savedByPatients")
  user                     User?                  @relation("Doctor_user", fields: [userId], references: [id])
  userId                   String?                @unique @map("user")

  @@index([doctorSpecialtyId])
}

model Language {
  id      String   @id @default(cuid())
  label   String   @default("")
  value   String   @unique @default("")
  doctors Doctor[] @relation("Doctor_languages")
}

model DoctorSpecialty {
  id      String   @id @default(cuid())
  label   String   @default("")
  value   String   @unique @default("")
  doctors Doctor[] @relation("Doctor_doctorSpecialty")
}

model DoctorSubSpecialty {
  id      String   @id @default(cuid())
  label   String   @default("")
  value   String   @unique @default("")
  doctors Doctor[] @relation("Doctor_doctorSubSpecialties")
}

model HealthCard {
  id                    String      @id @default(cuid())
  dateOfBirth           DateTime
  expiryDate            DateTime
  insurancePolicyNumber String      @default("")
  insuranceProvider     String      @default("")
  nameOnCard            String      @default("")
  versionCode           String      @default("")
  patient               Patient?    @relation("HealthCard_patient", fields: [patientId], references: [id])
  patientId             String?     @map("patient")
  userInvite            UserInvite? @relation("HealthCard_userInvite", fields: [userInviteId], references: [id])
  userInviteId          String?     @unique @map("userInvite")

  @@index([patientId])
}

model Country {
  id                  String               @id @default(cuid())
  administrativeAreas AdministrativeArea[] @relation("AdministrativeArea_country")
  isActive            Boolean              @default(false)
  label               String               @default("")
  value               String               @default("")
}

model AdministrativeArea {
  id        String   @id @default(cuid())
  country   Country? @relation("AdministrativeArea_country", fields: [countryId], references: [id])
  countryId String?  @map("country")
  isActive  Boolean  @default(false)
  label     String   @default("")
  value     String   @default("")

  @@index([countryId])
}

model EmergencyContact {
  id                    String   @id @default(cuid())
  email                 String   @default("")
  relation              String   @default("")
  firstName             String   @default("")
  lastName              String   @default("")
  cellPhoneNumberString String   @default("")
  homePhoneNumberString String   @default("")
  patient               Patient? @relation("EmergencyContact_patient", fields: [patientId], references: [id])
  patientId             String?  @map("patient")

  @@index([patientId])
}

model User {
  id                    String            @id @default(cuid())
  subjectId             String            @unique @default("")
  contracts             Contract[]        @relation("Contract_signedBy")
  dateOfBirth           DateTime?
  doctor                Doctor?           @relation("Doctor_user")
  email                 String            @unique @default("")
  firstName             String            @default("")
  isAdmin               Boolean           @default(false)
  isDummy               Boolean           @default(false)
  isOnboarded           Boolean           @default(false)
  isOnboardedDoctor     Boolean           @default(false)
  lastName              String            @default("")
  middleName            String            @default("")
  cellPhoneNumberString String            @default("")
  homePhoneNumberString String            @default("")
  photoSrc              String            @default("")
  sex                   String            @default("")
  username              String            @unique @default("")
  address               Address?          @relation("Address_user")
  signUpInvite          UserInvite?       @relation("User_signUpInvite", fields: [signUpInviteId], references: [id])
  signUpInviteId        String?           @unique @map("signUpInvite")
  prompts               Prompt[]          @relation("Prompt_user")
  profilePhoto          ProfilePhoto?     @relation("ProfilePhoto_user")
  patient               Patient?          @relation("Patient_user")
  stepperProgs          StepperProg[]     @relation("StepperProg_user")
  stepperStepProgs      StepperStepProg[] @relation("StepperStepProg_user")
  userInvites           UserInvite[]      @relation("UserInvite_invitedByUser")
}

model UserInvite {
  id                    String      @id @default(cuid())
  dateOfBirth           DateTime?
  email                 String      @unique @default("")
  firstName             String      @default("")
  lastName              String      @default("")
  middleName            String      @default("")
  cellPhoneNumberString String      @default("")
  sex                   String      @default("")
  invitedByUser         User?       @relation("UserInvite_invitedByUser", fields: [invitedByUserId], references: [id])
  invitedByUserId       String?     @map("invitedByUser")
  signedUpUser          User?       @relation("User_signUpInvite")
  healthCard            HealthCard? @relation("HealthCard_userInvite")

  @@index([invitedByUserId])
}

model Patient {
  id                String             @id @default(cuid())
  isCompleteProfile Boolean            @default(false)
  name              String             @default("")
  appointments      Appointment[]      @relation("Appointment_patient")
  appointmentVitals AppointmentVital[] @relation("AppointmentVital_patient")
  appointmentNotes  AppointmentNote[]  @relation("AppointmentNote_patient")
  bookings          Booking[]          @relation("Booking_patient")
  caredByDoctors    Doctor[]           @relation("Doctor_caringForPatients")
  emergencyContacts EmergencyContact[] @relation("EmergencyContact_patient")
  forms             Form[]             @relation("Form_patient")
  healthCards       HealthCard[]       @relation("HealthCard_patient")
  medications       Medication[]       @relation("Medication_patient")
  pharmacyLocations PharmacyLocation[] @relation("Patient_pharmacyLocations")
  prescriptions     Prescription[]     @relation("Prescription_patient")
  savedDoctors      Doctor[]           @relation("Doctor_savedByPatients")
  user              User?              @relation("Patient_user", fields: [userId], references: [id])
  userId            String?            @unique @map("user")
  visitedDoctors    Doctor[]           @relation("Doctor_patients")
}

model Medication {
  id                 String            @id @default(cuid())
  activeIngredient   String            @default("")
  companyName        String            @default("")
  drugCode           Int?
  brandName          String            @default("")
  dosageCount        Int?
  dosageUnit         String            @default("")
  patient            Patient?          @relation("Medication_patient", fields: [patientId], references: [id])
  patientId          String?           @map("patient")
  prescription       Prescription?     @relation("Medication_prescription", fields: [prescriptionId], references: [id])
  prescriptionId     String?           @map("prescription")
  prescriptionItem   PrescriptionItem? @relation("Medication_prescriptionItem", fields: [prescriptionItemId], references: [id])
  prescriptionItemId String?           @unique @map("prescriptionItem")

  @@index([activeIngredient])
  @@index([drugCode])
  @@index([brandName])
  @@index([patientId])
  @@index([prescriptionId])
}

model Prescription {
  id                String             @id @default(cuid())
  appointment       Appointment?       @relation("Appointment_prescription")
  doctor            Doctor?            @relation("Prescription_doctor", fields: [doctorId], references: [id])
  doctorId          String?            @map("doctor")
  medications       Medication[]       @relation("Medication_prescription")
  patient           Patient?           @relation("Prescription_patient", fields: [patientId], references: [id])
  patientId         String?            @map("patient")
  prescriptionItems PrescriptionItem[] @relation("PrescriptionItem_prescription")

  @@index([doctorId])
  @@index([patientId])
}

model PrescriptionItem {
  id             String        @id @default(cuid())
  medication     Medication?   @relation("Medication_prescriptionItem")
  prescription   Prescription? @relation("PrescriptionItem_prescription", fields: [prescriptionId], references: [id])
  prescriptionId String?       @map("prescription")
  instructions   String        @default("")
  luCode         String        @default("")
  refills        String        @default("")

  @@index([prescriptionId])
}

model Prompt {
  id          String   @id @default(cuid())
  stepper     Stepper? @relation("Prompt_stepper", fields: [stepperId], references: [id])
  stepperId   String?  @unique @map("stepper")
  user        User?    @relation("Prompt_user", fields: [userId], references: [id])
  userId      String?  @map("user")
  name        String   @default("")
  promptType  String   @default("")
  promptValue String   @default("")
  slug        String   @default("")

  @@index([userId])
}

model ProfilePhoto {
  id      String  @id @default(cuid())
  src     Json?
  altText String  @default("")
  user    User?   @relation("ProfilePhoto_user", fields: [userId], references: [id])
  userId  String? @unique @map("user")
}

model ProofOfIdentification {
  id         String  @id @default(cuid())
  src        Json?
  altText    String  @default("")
  doctor     Doctor? @relation("Doctor_proofOfIdentification")
  isVerified Boolean @default(false)
}

model ProofOfInsurance {
  id         String  @id @default(cuid())
  src        Json?
  altText    String  @default("")
  doctor     Doctor? @relation("Doctor_proofOfInsurance")
  isVerified Boolean @default(false)
}

model ProofOfLicense {
  id         String  @id @default(cuid())
  src        Json?
  altText    String  @default("")
  doctor     Doctor? @relation("Doctor_proofOfLicense")
  isVerified Boolean @default(false)
}

model Pharmacy {
  id          String             @id @default(cuid())
  companyName String             @unique @default("")
  locations   PharmacyLocation[] @relation("PharmacyLocation_pharmacy")
}

model PharmacyLocation {
  id                  String    @id @default(cuid())
  accreditationNumber String    @unique @default("")
  status              String    @default("")
  phoneString         String    @default("")
  faxString           String    @default("")
  address             Address?  @relation("Address_pharmacyLocation")
  pharmacy            Pharmacy? @relation("PharmacyLocation_pharmacy", fields: [pharmacyId], references: [id])
  pharmacyId          String?   @map("pharmacy")
  patients            Patient[] @relation("Patient_pharmacyLocations")

  @@index([pharmacyId])
}

model Stepper {
  id                String            @id @default(cuid())
  title             String            @default("")
  name              String            @default("")
  slug              String            @unique @default("")
  description       String            @default("")
  eyebrow           String            @default("")
  prompt            Prompt?           @relation("Prompt_stepper")
  stepsOrderBySlugs String            @default("")
  stepperSteps      StepperStep[]     @relation("StepperStep_stepper")
  stepperProgs      StepperProg[]     @relation("StepperProg_stepper")
  stepperStepProgs  StepperStepProg[] @relation("StepperStepProg_stepper")
}

model StepperProg {
  id               String            @id @default(cuid())
  name             String            @default("")
  isCompleted      Boolean           @default(false)
  stepper          Stepper?          @relation("StepperProg_stepper", fields: [stepperId], references: [id])
  stepperId        String?           @map("stepper")
  stepperStepProgs StepperStepProg[] @relation("StepperStepProg_stepperProg")
  user             User?             @relation("StepperProg_user", fields: [userId], references: [id])
  userId           String?           @map("user")

  @@index([stepperId])
  @@index([userId])
}

model StepperStep {
  id                String           @id @default(cuid())
  component         String           @default("")
  description       String           @default("")
  isFinal           Boolean          @default(false)
  label             String           @default("")
  order             Int
  slug              String           @unique @default("")
  stepper           Stepper?         @relation("StepperStep_stepper", fields: [stepperId], references: [id])
  stepperId         String?          @map("stepper")
  stepperStepProg   StepperStepProg? @relation("StepperStep_stepperStepProg", fields: [stepperStepProgId], references: [id])
  stepperStepProgId String?          @unique @map("stepperStepProg")
  title             String           @default("")

  @@index([stepperId])
}

model StepperStepProg {
  id            String       @id @default(cuid())
  name          String       @default("")
  percentDone   Int?
  isCompleted   Boolean      @default(false)
  stepper       Stepper?     @relation("StepperStepProg_stepper", fields: [stepperId], references: [id])
  stepperId     String?      @map("stepper")
  stepperStep   StepperStep? @relation("StepperStep_stepperStepProg")
  stepperProg   StepperProg? @relation("StepperStepProg_stepperProg", fields: [stepperProgId], references: [id])
  stepperProgId String?      @map("stepperProg")
  user          User?        @relation("StepperStepProg_user", fields: [userId], references: [id])
  userId        String?      @map("user")

  @@index([stepperId])
  @@index([stepperProgId])
  @@index([userId])
}